// Signature format: 2.0
package android.test {

  @Deprecated public class AndroidTestCase extends junit.framework.TestCase {
    ctor @Deprecated public AndroidTestCase();
    method @Deprecated public void assertActivityRequiresPermission(String, String, String);
    method @Deprecated public void assertReadingContentUriRequiresPermission(android.net.Uri, String);
    method @Deprecated public void assertWritingContentUriRequiresPermission(android.net.Uri, String);
    method @Deprecated public android.content.Context getContext();
    method @Deprecated protected void scrubClass(Class<?>) throws java.lang.IllegalAccessException;
    method @Deprecated public void setContext(android.content.Context);
    method @Deprecated @android.test.suitebuilder.annotation.Suppress public void testAndroidTestCaseSetupProperly();
    field @Deprecated protected android.content.Context mContext;
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target(java.lang.annotation.ElementType.METHOD) public @interface FlakyTest {
    method @Deprecated public abstract int tolerance() default 1;
  }

  @Deprecated public class InstrumentationTestCase extends junit.framework.TestCase {
    ctor @Deprecated public InstrumentationTestCase();
    method @Deprecated public android.app.Instrumentation getInstrumentation();
    method @Deprecated public void injectInsrumentation(android.app.Instrumentation);
    method @Deprecated public void injectInstrumentation(android.app.Instrumentation);
    method @Deprecated public final <T extends android.app.Activity> T launchActivity(String, Class<T>, android.os.Bundle);
    method @Deprecated public final <T extends android.app.Activity> T launchActivityWithIntent(String, Class<T>, android.content.Intent);
    method @Deprecated public void runTestOnUiThread(Runnable) throws java.lang.Throwable;
    method @Deprecated public void sendKeys(String);
    method @Deprecated public void sendKeys(int...);
    method @Deprecated public void sendRepeatedKeys(int...);
  }

  @Deprecated public class InstrumentationTestSuite extends junit.framework.TestSuite {
    ctor @Deprecated public InstrumentationTestSuite(android.app.Instrumentation);
    ctor @Deprecated public InstrumentationTestSuite(String, android.app.Instrumentation);
    ctor @Deprecated public InstrumentationTestSuite(Class, android.app.Instrumentation);
    method @Deprecated public void addTestSuite(Class);
  }

  @Deprecated public interface PerformanceTestCase {
    method @Deprecated public boolean isPerformanceOnly();
    method @Deprecated public int startPerformance(android.test.PerformanceTestCase.Intermediates);
  }

  @Deprecated public static interface PerformanceTestCase.Intermediates {
    method @Deprecated public void addIntermediate(String);
    method @Deprecated public void addIntermediate(String, long);
    method @Deprecated public void finishTiming(boolean);
    method @Deprecated public void setInternalIterations(int);
    method @Deprecated public void startTiming(boolean);
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target(java.lang.annotation.ElementType.METHOD) public @interface RepetitiveTest {
    method @Deprecated public abstract int numIterations() default 1;
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target(java.lang.annotation.ElementType.METHOD) public @interface UiThreadTest {
  }

}

package android.test.suitebuilder.annotation {

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface LargeTest {
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface MediumTest {
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface SmallTest {
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface Smoke {
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface Suppress {
  }

}

package com.android.internal.util {

  @Deprecated public interface Predicate<T> {
    method @Deprecated public boolean apply(T);
  }

}

package junit.framework {

  public class Assert {
    ctor protected Assert();
    method public static void assertEquals(String, Object, Object);
    method public static void assertEquals(Object, Object);
    method public static void assertEquals(String, String, String);
    method public static void assertEquals(String, String);
    method public static void assertEquals(String, double, double, double);
    method public static void assertEquals(double, double, double);
    method public static void assertEquals(String, float, float, float);
    method public static void assertEquals(float, float, float);
    method public static void assertEquals(String, long, long);
    method public static void assertEquals(long, long);
    method public static void assertEquals(String, boolean, boolean);
    method public static void assertEquals(boolean, boolean);
    method public static void assertEquals(String, byte, byte);
    method public static void assertEquals(byte, byte);
    method public static void assertEquals(String, char, char);
    method public static void assertEquals(char, char);
    method public static void assertEquals(String, short, short);
    method public static void assertEquals(short, short);
    method public static void assertEquals(String, int, int);
    method public static void assertEquals(int, int);
    method public static void assertFalse(String, boolean);
    method public static void assertFalse(boolean);
    method public static void assertNotNull(Object);
    method public static void assertNotNull(String, Object);
    method public static void assertNotSame(String, Object, Object);
    method public static void assertNotSame(Object, Object);
    method public static void assertNull(Object);
    method public static void assertNull(String, Object);
    method public static void assertSame(String, Object, Object);
    method public static void assertSame(Object, Object);
    method public static void assertTrue(String, boolean);
    method public static void assertTrue(boolean);
    method public static void fail(String);
    method public static void fail();
    method public static void failNotEquals(String, Object, Object);
    method public static void failNotSame(String, Object, Object);
    method public static void failSame(String);
    method public static String format(String, Object, Object);
  }

  public class AssertionFailedError extends java.lang.AssertionError {
    ctor public AssertionFailedError();
    ctor public AssertionFailedError(String);
  }

  public class ComparisonFailure extends junit.framework.AssertionFailedError {
    ctor public ComparisonFailure(String, String, String);
    method public String getActual();
    method public String getExpected();
  }

  public interface Protectable {
    method public void protect() throws java.lang.Throwable;
  }

  public interface Test {
    method public int countTestCases();
    method public void run(junit.framework.TestResult);
  }

  public abstract class TestCase extends junit.framework.Assert implements junit.framework.Test {
    ctor public TestCase();
    ctor public TestCase(String);
    method public int countTestCases();
    method protected junit.framework.TestResult createResult();
    method public String getName();
    method public junit.framework.TestResult run();
    method public void run(junit.framework.TestResult);
    method public void runBare() throws java.lang.Throwable;
    method protected void runTest() throws java.lang.Throwable;
    method public void setName(String);
    method protected void setUp() throws java.lang.Exception;
    method protected void tearDown() throws java.lang.Exception;
  }

  public class TestFailure {
    ctor public TestFailure(junit.framework.Test, Throwable);
    method public String exceptionMessage();
    method public junit.framework.Test failedTest();
    method public boolean isFailure();
    method public Throwable thrownException();
    method public String trace();
    field protected junit.framework.Test fFailedTest;
    field protected Throwable fThrownException;
  }

  public interface TestListener {
    method public void addError(junit.framework.Test, Throwable);
    method public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
    method public void endTest(junit.framework.Test);
    method public void startTest(junit.framework.Test);
  }

  public class TestResult {
    ctor public TestResult();
    method public void addError(junit.framework.Test, Throwable);
    method public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
    method public void addListener(junit.framework.TestListener);
    method public void endTest(junit.framework.Test);
    method public int errorCount();
    method public java.util.Enumeration<junit.framework.TestFailure> errors();
    method public int failureCount();
    method public java.util.Enumeration<junit.framework.TestFailure> failures();
    method public void removeListener(junit.framework.TestListener);
    method protected void run(junit.framework.TestCase);
    method public int runCount();
    method public void runProtected(junit.framework.Test, junit.framework.Protectable);
    method public boolean shouldStop();
    method public void startTest(junit.framework.Test);
    method public void stop();
    method public boolean wasSuccessful();
    field protected java.util.Vector<junit.framework.TestFailure> fErrors;
    field protected java.util.Vector<junit.framework.TestFailure> fFailures;
    field protected java.util.Vector<junit.framework.TestListener> fListeners;
    field protected int fRunTests;
  }

  public class TestSuite implements junit.framework.Test {
    ctor public TestSuite();
    ctor public TestSuite(Class<?>);
    ctor public TestSuite(Class<? extends junit.framework.TestCase>, String);
    ctor public TestSuite(String);
    ctor public TestSuite(Class<?>...);
    ctor public TestSuite(Class<? extends junit.framework.TestCase>[], String);
    method public void addTest(junit.framework.Test);
    method public void addTestSuite(Class<? extends junit.framework.TestCase>);
    method public int countTestCases();
    method public static junit.framework.Test createTest(Class<?>, String);
    method public String getName();
    method public static java.lang.reflect.Constructor<?> getTestConstructor(Class<?>) throws java.lang.NoSuchMethodException;
    method public void run(junit.framework.TestResult);
    method public void runTest(junit.framework.Test, junit.framework.TestResult);
    method public void setName(String);
    method public junit.framework.Test testAt(int);
    method public int testCount();
    method public java.util.Enumeration<junit.framework.Test> tests();
    method public static junit.framework.Test warning(String);
  }

}

