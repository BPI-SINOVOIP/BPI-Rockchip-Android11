// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/channelz/v1/channelz.proto

package io.grpc.channelz.v1;

/**
 * <pre>
 * Channel is a logical grouping of channels, subchannels, and sockets.
 * </pre>
 *
 * Protobuf type {@code grpc.channelz.v1.Channel}
 */
public  final class Channel extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:grpc.channelz.v1.Channel)
    ChannelOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Channel.newBuilder() to construct.
  private Channel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Channel() {
    channelRef_ = java.util.Collections.emptyList();
    subchannelRef_ = java.util.Collections.emptyList();
    socketRef_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Channel(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            io.grpc.channelz.v1.ChannelRef.Builder subBuilder = null;
            if (ref_ != null) {
              subBuilder = ref_.toBuilder();
            }
            ref_ = input.readMessage(io.grpc.channelz.v1.ChannelRef.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(ref_);
              ref_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            io.grpc.channelz.v1.ChannelData.Builder subBuilder = null;
            if (data_ != null) {
              subBuilder = data_.toBuilder();
            }
            data_ = input.readMessage(io.grpc.channelz.v1.ChannelData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(data_);
              data_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              channelRef_ = new java.util.ArrayList<io.grpc.channelz.v1.ChannelRef>();
              mutable_bitField0_ |= 0x00000004;
            }
            channelRef_.add(
                input.readMessage(io.grpc.channelz.v1.ChannelRef.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              subchannelRef_ = new java.util.ArrayList<io.grpc.channelz.v1.SubchannelRef>();
              mutable_bitField0_ |= 0x00000008;
            }
            subchannelRef_.add(
                input.readMessage(io.grpc.channelz.v1.SubchannelRef.parser(), extensionRegistry));
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              socketRef_ = new java.util.ArrayList<io.grpc.channelz.v1.SocketRef>();
              mutable_bitField0_ |= 0x00000010;
            }
            socketRef_.add(
                input.readMessage(io.grpc.channelz.v1.SocketRef.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        channelRef_ = java.util.Collections.unmodifiableList(channelRef_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        subchannelRef_ = java.util.Collections.unmodifiableList(subchannelRef_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        socketRef_ = java.util.Collections.unmodifiableList(socketRef_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.grpc.channelz.v1.ChannelzProto.internal_static_grpc_channelz_v1_Channel_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.grpc.channelz.v1.ChannelzProto.internal_static_grpc_channelz_v1_Channel_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.grpc.channelz.v1.Channel.class, io.grpc.channelz.v1.Channel.Builder.class);
  }

  private int bitField0_;
  public static final int REF_FIELD_NUMBER = 1;
  private io.grpc.channelz.v1.ChannelRef ref_;
  /**
   * <pre>
   * The identifier for this channel. This should bet set.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
   */
  public boolean hasRef() {
    return ref_ != null;
  }
  /**
   * <pre>
   * The identifier for this channel. This should bet set.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
   */
  public io.grpc.channelz.v1.ChannelRef getRef() {
    return ref_ == null ? io.grpc.channelz.v1.ChannelRef.getDefaultInstance() : ref_;
  }
  /**
   * <pre>
   * The identifier for this channel. This should bet set.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
   */
  public io.grpc.channelz.v1.ChannelRefOrBuilder getRefOrBuilder() {
    return getRef();
  }

  public static final int DATA_FIELD_NUMBER = 2;
  private io.grpc.channelz.v1.ChannelData data_;
  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  public boolean hasData() {
    return data_ != null;
  }
  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  public io.grpc.channelz.v1.ChannelData getData() {
    return data_ == null ? io.grpc.channelz.v1.ChannelData.getDefaultInstance() : data_;
  }
  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  public io.grpc.channelz.v1.ChannelDataOrBuilder getDataOrBuilder() {
    return getData();
  }

  public static final int CHANNEL_REF_FIELD_NUMBER = 3;
  private java.util.List<io.grpc.channelz.v1.ChannelRef> channelRef_;
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  public java.util.List<io.grpc.channelz.v1.ChannelRef> getChannelRefList() {
    return channelRef_;
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  public java.util.List<? extends io.grpc.channelz.v1.ChannelRefOrBuilder> 
      getChannelRefOrBuilderList() {
    return channelRef_;
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  public int getChannelRefCount() {
    return channelRef_.size();
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  public io.grpc.channelz.v1.ChannelRef getChannelRef(int index) {
    return channelRef_.get(index);
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  public io.grpc.channelz.v1.ChannelRefOrBuilder getChannelRefOrBuilder(
      int index) {
    return channelRef_.get(index);
  }

  public static final int SUBCHANNEL_REF_FIELD_NUMBER = 4;
  private java.util.List<io.grpc.channelz.v1.SubchannelRef> subchannelRef_;
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  public java.util.List<io.grpc.channelz.v1.SubchannelRef> getSubchannelRefList() {
    return subchannelRef_;
  }
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  public java.util.List<? extends io.grpc.channelz.v1.SubchannelRefOrBuilder> 
      getSubchannelRefOrBuilderList() {
    return subchannelRef_;
  }
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  public int getSubchannelRefCount() {
    return subchannelRef_.size();
  }
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  public io.grpc.channelz.v1.SubchannelRef getSubchannelRef(int index) {
    return subchannelRef_.get(index);
  }
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  public io.grpc.channelz.v1.SubchannelRefOrBuilder getSubchannelRefOrBuilder(
      int index) {
    return subchannelRef_.get(index);
  }

  public static final int SOCKET_REF_FIELD_NUMBER = 5;
  private java.util.List<io.grpc.channelz.v1.SocketRef> socketRef_;
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  public java.util.List<io.grpc.channelz.v1.SocketRef> getSocketRefList() {
    return socketRef_;
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  public java.util.List<? extends io.grpc.channelz.v1.SocketRefOrBuilder> 
      getSocketRefOrBuilderList() {
    return socketRef_;
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  public int getSocketRefCount() {
    return socketRef_.size();
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  public io.grpc.channelz.v1.SocketRef getSocketRef(int index) {
    return socketRef_.get(index);
  }
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  public io.grpc.channelz.v1.SocketRefOrBuilder getSocketRefOrBuilder(
      int index) {
    return socketRef_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (ref_ != null) {
      output.writeMessage(1, getRef());
    }
    if (data_ != null) {
      output.writeMessage(2, getData());
    }
    for (int i = 0; i < channelRef_.size(); i++) {
      output.writeMessage(3, channelRef_.get(i));
    }
    for (int i = 0; i < subchannelRef_.size(); i++) {
      output.writeMessage(4, subchannelRef_.get(i));
    }
    for (int i = 0; i < socketRef_.size(); i++) {
      output.writeMessage(5, socketRef_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (ref_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRef());
    }
    if (data_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getData());
    }
    for (int i = 0; i < channelRef_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, channelRef_.get(i));
    }
    for (int i = 0; i < subchannelRef_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, subchannelRef_.get(i));
    }
    for (int i = 0; i < socketRef_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, socketRef_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.grpc.channelz.v1.Channel)) {
      return super.equals(obj);
    }
    io.grpc.channelz.v1.Channel other = (io.grpc.channelz.v1.Channel) obj;

    boolean result = true;
    result = result && (hasRef() == other.hasRef());
    if (hasRef()) {
      result = result && getRef()
          .equals(other.getRef());
    }
    result = result && (hasData() == other.hasData());
    if (hasData()) {
      result = result && getData()
          .equals(other.getData());
    }
    result = result && getChannelRefList()
        .equals(other.getChannelRefList());
    result = result && getSubchannelRefList()
        .equals(other.getSubchannelRefList());
    result = result && getSocketRefList()
        .equals(other.getSocketRefList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRef()) {
      hash = (37 * hash) + REF_FIELD_NUMBER;
      hash = (53 * hash) + getRef().hashCode();
    }
    if (hasData()) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
    }
    if (getChannelRefCount() > 0) {
      hash = (37 * hash) + CHANNEL_REF_FIELD_NUMBER;
      hash = (53 * hash) + getChannelRefList().hashCode();
    }
    if (getSubchannelRefCount() > 0) {
      hash = (37 * hash) + SUBCHANNEL_REF_FIELD_NUMBER;
      hash = (53 * hash) + getSubchannelRefList().hashCode();
    }
    if (getSocketRefCount() > 0) {
      hash = (37 * hash) + SOCKET_REF_FIELD_NUMBER;
      hash = (53 * hash) + getSocketRefList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.grpc.channelz.v1.Channel parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grpc.channelz.v1.Channel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.grpc.channelz.v1.Channel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grpc.channelz.v1.Channel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.grpc.channelz.v1.Channel prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Channel is a logical grouping of channels, subchannels, and sockets.
   * </pre>
   *
   * Protobuf type {@code grpc.channelz.v1.Channel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.channelz.v1.Channel)
      io.grpc.channelz.v1.ChannelOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.grpc.channelz.v1.ChannelzProto.internal_static_grpc_channelz_v1_Channel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.grpc.channelz.v1.ChannelzProto.internal_static_grpc_channelz_v1_Channel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.grpc.channelz.v1.Channel.class, io.grpc.channelz.v1.Channel.Builder.class);
    }

    // Construct using io.grpc.channelz.v1.Channel.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getChannelRefFieldBuilder();
        getSubchannelRefFieldBuilder();
        getSocketRefFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (refBuilder_ == null) {
        ref_ = null;
      } else {
        ref_ = null;
        refBuilder_ = null;
      }
      if (dataBuilder_ == null) {
        data_ = null;
      } else {
        data_ = null;
        dataBuilder_ = null;
      }
      if (channelRefBuilder_ == null) {
        channelRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        channelRefBuilder_.clear();
      }
      if (subchannelRefBuilder_ == null) {
        subchannelRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        subchannelRefBuilder_.clear();
      }
      if (socketRefBuilder_ == null) {
        socketRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        socketRefBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.grpc.channelz.v1.ChannelzProto.internal_static_grpc_channelz_v1_Channel_descriptor;
    }

    public io.grpc.channelz.v1.Channel getDefaultInstanceForType() {
      return io.grpc.channelz.v1.Channel.getDefaultInstance();
    }

    public io.grpc.channelz.v1.Channel build() {
      io.grpc.channelz.v1.Channel result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public io.grpc.channelz.v1.Channel buildPartial() {
      io.grpc.channelz.v1.Channel result = new io.grpc.channelz.v1.Channel(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (refBuilder_ == null) {
        result.ref_ = ref_;
      } else {
        result.ref_ = refBuilder_.build();
      }
      if (dataBuilder_ == null) {
        result.data_ = data_;
      } else {
        result.data_ = dataBuilder_.build();
      }
      if (channelRefBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          channelRef_ = java.util.Collections.unmodifiableList(channelRef_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.channelRef_ = channelRef_;
      } else {
        result.channelRef_ = channelRefBuilder_.build();
      }
      if (subchannelRefBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          subchannelRef_ = java.util.Collections.unmodifiableList(subchannelRef_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.subchannelRef_ = subchannelRef_;
      } else {
        result.subchannelRef_ = subchannelRefBuilder_.build();
      }
      if (socketRefBuilder_ == null) {
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          socketRef_ = java.util.Collections.unmodifiableList(socketRef_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.socketRef_ = socketRef_;
      } else {
        result.socketRef_ = socketRefBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.grpc.channelz.v1.Channel) {
        return mergeFrom((io.grpc.channelz.v1.Channel)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.grpc.channelz.v1.Channel other) {
      if (other == io.grpc.channelz.v1.Channel.getDefaultInstance()) return this;
      if (other.hasRef()) {
        mergeRef(other.getRef());
      }
      if (other.hasData()) {
        mergeData(other.getData());
      }
      if (channelRefBuilder_ == null) {
        if (!other.channelRef_.isEmpty()) {
          if (channelRef_.isEmpty()) {
            channelRef_ = other.channelRef_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChannelRefIsMutable();
            channelRef_.addAll(other.channelRef_);
          }
          onChanged();
        }
      } else {
        if (!other.channelRef_.isEmpty()) {
          if (channelRefBuilder_.isEmpty()) {
            channelRefBuilder_.dispose();
            channelRefBuilder_ = null;
            channelRef_ = other.channelRef_;
            bitField0_ = (bitField0_ & ~0x00000004);
            channelRefBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getChannelRefFieldBuilder() : null;
          } else {
            channelRefBuilder_.addAllMessages(other.channelRef_);
          }
        }
      }
      if (subchannelRefBuilder_ == null) {
        if (!other.subchannelRef_.isEmpty()) {
          if (subchannelRef_.isEmpty()) {
            subchannelRef_ = other.subchannelRef_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSubchannelRefIsMutable();
            subchannelRef_.addAll(other.subchannelRef_);
          }
          onChanged();
        }
      } else {
        if (!other.subchannelRef_.isEmpty()) {
          if (subchannelRefBuilder_.isEmpty()) {
            subchannelRefBuilder_.dispose();
            subchannelRefBuilder_ = null;
            subchannelRef_ = other.subchannelRef_;
            bitField0_ = (bitField0_ & ~0x00000008);
            subchannelRefBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSubchannelRefFieldBuilder() : null;
          } else {
            subchannelRefBuilder_.addAllMessages(other.subchannelRef_);
          }
        }
      }
      if (socketRefBuilder_ == null) {
        if (!other.socketRef_.isEmpty()) {
          if (socketRef_.isEmpty()) {
            socketRef_ = other.socketRef_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSocketRefIsMutable();
            socketRef_.addAll(other.socketRef_);
          }
          onChanged();
        }
      } else {
        if (!other.socketRef_.isEmpty()) {
          if (socketRefBuilder_.isEmpty()) {
            socketRefBuilder_.dispose();
            socketRefBuilder_ = null;
            socketRef_ = other.socketRef_;
            bitField0_ = (bitField0_ & ~0x00000010);
            socketRefBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSocketRefFieldBuilder() : null;
          } else {
            socketRefBuilder_.addAllMessages(other.socketRef_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.grpc.channelz.v1.Channel parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.grpc.channelz.v1.Channel) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.grpc.channelz.v1.ChannelRef ref_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder> refBuilder_;
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public boolean hasRef() {
      return refBuilder_ != null || ref_ != null;
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public io.grpc.channelz.v1.ChannelRef getRef() {
      if (refBuilder_ == null) {
        return ref_ == null ? io.grpc.channelz.v1.ChannelRef.getDefaultInstance() : ref_;
      } else {
        return refBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public Builder setRef(io.grpc.channelz.v1.ChannelRef value) {
      if (refBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ref_ = value;
        onChanged();
      } else {
        refBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public Builder setRef(
        io.grpc.channelz.v1.ChannelRef.Builder builderForValue) {
      if (refBuilder_ == null) {
        ref_ = builderForValue.build();
        onChanged();
      } else {
        refBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public Builder mergeRef(io.grpc.channelz.v1.ChannelRef value) {
      if (refBuilder_ == null) {
        if (ref_ != null) {
          ref_ =
            io.grpc.channelz.v1.ChannelRef.newBuilder(ref_).mergeFrom(value).buildPartial();
        } else {
          ref_ = value;
        }
        onChanged();
      } else {
        refBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public Builder clearRef() {
      if (refBuilder_ == null) {
        ref_ = null;
        onChanged();
      } else {
        ref_ = null;
        refBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public io.grpc.channelz.v1.ChannelRef.Builder getRefBuilder() {
      
      onChanged();
      return getRefFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    public io.grpc.channelz.v1.ChannelRefOrBuilder getRefOrBuilder() {
      if (refBuilder_ != null) {
        return refBuilder_.getMessageOrBuilder();
      } else {
        return ref_ == null ?
            io.grpc.channelz.v1.ChannelRef.getDefaultInstance() : ref_;
      }
    }
    /**
     * <pre>
     * The identifier for this channel. This should bet set.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelRef ref = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder> 
        getRefFieldBuilder() {
      if (refBuilder_ == null) {
        refBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder>(
                getRef(),
                getParentForChildren(),
                isClean());
        ref_ = null;
      }
      return refBuilder_;
    }

    private io.grpc.channelz.v1.ChannelData data_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.grpc.channelz.v1.ChannelData, io.grpc.channelz.v1.ChannelData.Builder, io.grpc.channelz.v1.ChannelDataOrBuilder> dataBuilder_;
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public boolean hasData() {
      return dataBuilder_ != null || data_ != null;
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public io.grpc.channelz.v1.ChannelData getData() {
      if (dataBuilder_ == null) {
        return data_ == null ? io.grpc.channelz.v1.ChannelData.getDefaultInstance() : data_;
      } else {
        return dataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public Builder setData(io.grpc.channelz.v1.ChannelData value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        data_ = value;
        onChanged();
      } else {
        dataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public Builder setData(
        io.grpc.channelz.v1.ChannelData.Builder builderForValue) {
      if (dataBuilder_ == null) {
        data_ = builderForValue.build();
        onChanged();
      } else {
        dataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public Builder mergeData(io.grpc.channelz.v1.ChannelData value) {
      if (dataBuilder_ == null) {
        if (data_ != null) {
          data_ =
            io.grpc.channelz.v1.ChannelData.newBuilder(data_).mergeFrom(value).buildPartial();
        } else {
          data_ = value;
        }
        onChanged();
      } else {
        dataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public Builder clearData() {
      if (dataBuilder_ == null) {
        data_ = null;
        onChanged();
      } else {
        data_ = null;
        dataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public io.grpc.channelz.v1.ChannelData.Builder getDataBuilder() {
      
      onChanged();
      return getDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    public io.grpc.channelz.v1.ChannelDataOrBuilder getDataOrBuilder() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilder();
      } else {
        return data_ == null ?
            io.grpc.channelz.v1.ChannelData.getDefaultInstance() : data_;
      }
    }
    /**
     * <pre>
     * Data specific to this channel.
     * </pre>
     *
     * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.grpc.channelz.v1.ChannelData, io.grpc.channelz.v1.ChannelData.Builder, io.grpc.channelz.v1.ChannelDataOrBuilder> 
        getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.grpc.channelz.v1.ChannelData, io.grpc.channelz.v1.ChannelData.Builder, io.grpc.channelz.v1.ChannelDataOrBuilder>(
                getData(),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }

    private java.util.List<io.grpc.channelz.v1.ChannelRef> channelRef_ =
      java.util.Collections.emptyList();
    private void ensureChannelRefIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        channelRef_ = new java.util.ArrayList<io.grpc.channelz.v1.ChannelRef>(channelRef_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder> channelRefBuilder_;

    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public java.util.List<io.grpc.channelz.v1.ChannelRef> getChannelRefList() {
      if (channelRefBuilder_ == null) {
        return java.util.Collections.unmodifiableList(channelRef_);
      } else {
        return channelRefBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public int getChannelRefCount() {
      if (channelRefBuilder_ == null) {
        return channelRef_.size();
      } else {
        return channelRefBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public io.grpc.channelz.v1.ChannelRef getChannelRef(int index) {
      if (channelRefBuilder_ == null) {
        return channelRef_.get(index);
      } else {
        return channelRefBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder setChannelRef(
        int index, io.grpc.channelz.v1.ChannelRef value) {
      if (channelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelRefIsMutable();
        channelRef_.set(index, value);
        onChanged();
      } else {
        channelRefBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder setChannelRef(
        int index, io.grpc.channelz.v1.ChannelRef.Builder builderForValue) {
      if (channelRefBuilder_ == null) {
        ensureChannelRefIsMutable();
        channelRef_.set(index, builderForValue.build());
        onChanged();
      } else {
        channelRefBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder addChannelRef(io.grpc.channelz.v1.ChannelRef value) {
      if (channelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelRefIsMutable();
        channelRef_.add(value);
        onChanged();
      } else {
        channelRefBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder addChannelRef(
        int index, io.grpc.channelz.v1.ChannelRef value) {
      if (channelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelRefIsMutable();
        channelRef_.add(index, value);
        onChanged();
      } else {
        channelRefBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder addChannelRef(
        io.grpc.channelz.v1.ChannelRef.Builder builderForValue) {
      if (channelRefBuilder_ == null) {
        ensureChannelRefIsMutable();
        channelRef_.add(builderForValue.build());
        onChanged();
      } else {
        channelRefBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder addChannelRef(
        int index, io.grpc.channelz.v1.ChannelRef.Builder builderForValue) {
      if (channelRefBuilder_ == null) {
        ensureChannelRefIsMutable();
        channelRef_.add(index, builderForValue.build());
        onChanged();
      } else {
        channelRefBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder addAllChannelRef(
        java.lang.Iterable<? extends io.grpc.channelz.v1.ChannelRef> values) {
      if (channelRefBuilder_ == null) {
        ensureChannelRefIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, channelRef_);
        onChanged();
      } else {
        channelRefBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder clearChannelRef() {
      if (channelRefBuilder_ == null) {
        channelRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        channelRefBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public Builder removeChannelRef(int index) {
      if (channelRefBuilder_ == null) {
        ensureChannelRefIsMutable();
        channelRef_.remove(index);
        onChanged();
      } else {
        channelRefBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public io.grpc.channelz.v1.ChannelRef.Builder getChannelRefBuilder(
        int index) {
      return getChannelRefFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public io.grpc.channelz.v1.ChannelRefOrBuilder getChannelRefOrBuilder(
        int index) {
      if (channelRefBuilder_ == null) {
        return channelRef_.get(index);  } else {
        return channelRefBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public java.util.List<? extends io.grpc.channelz.v1.ChannelRefOrBuilder> 
         getChannelRefOrBuilderList() {
      if (channelRefBuilder_ != null) {
        return channelRefBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(channelRef_);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public io.grpc.channelz.v1.ChannelRef.Builder addChannelRefBuilder() {
      return getChannelRefFieldBuilder().addBuilder(
          io.grpc.channelz.v1.ChannelRef.getDefaultInstance());
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public io.grpc.channelz.v1.ChannelRef.Builder addChannelRefBuilder(
        int index) {
      return getChannelRefFieldBuilder().addBuilder(
          index, io.grpc.channelz.v1.ChannelRef.getDefaultInstance());
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of channel refs.
     * There may not be cycles in the ref graph.
     * A channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
     */
    public java.util.List<io.grpc.channelz.v1.ChannelRef.Builder> 
         getChannelRefBuilderList() {
      return getChannelRefFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder> 
        getChannelRefFieldBuilder() {
      if (channelRefBuilder_ == null) {
        channelRefBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.grpc.channelz.v1.ChannelRef, io.grpc.channelz.v1.ChannelRef.Builder, io.grpc.channelz.v1.ChannelRefOrBuilder>(
                channelRef_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        channelRef_ = null;
      }
      return channelRefBuilder_;
    }

    private java.util.List<io.grpc.channelz.v1.SubchannelRef> subchannelRef_ =
      java.util.Collections.emptyList();
    private void ensureSubchannelRefIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        subchannelRef_ = new java.util.ArrayList<io.grpc.channelz.v1.SubchannelRef>(subchannelRef_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.SubchannelRef, io.grpc.channelz.v1.SubchannelRef.Builder, io.grpc.channelz.v1.SubchannelRefOrBuilder> subchannelRefBuilder_;

    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public java.util.List<io.grpc.channelz.v1.SubchannelRef> getSubchannelRefList() {
      if (subchannelRefBuilder_ == null) {
        return java.util.Collections.unmodifiableList(subchannelRef_);
      } else {
        return subchannelRefBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public int getSubchannelRefCount() {
      if (subchannelRefBuilder_ == null) {
        return subchannelRef_.size();
      } else {
        return subchannelRefBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public io.grpc.channelz.v1.SubchannelRef getSubchannelRef(int index) {
      if (subchannelRefBuilder_ == null) {
        return subchannelRef_.get(index);
      } else {
        return subchannelRefBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder setSubchannelRef(
        int index, io.grpc.channelz.v1.SubchannelRef value) {
      if (subchannelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubchannelRefIsMutable();
        subchannelRef_.set(index, value);
        onChanged();
      } else {
        subchannelRefBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder setSubchannelRef(
        int index, io.grpc.channelz.v1.SubchannelRef.Builder builderForValue) {
      if (subchannelRefBuilder_ == null) {
        ensureSubchannelRefIsMutable();
        subchannelRef_.set(index, builderForValue.build());
        onChanged();
      } else {
        subchannelRefBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder addSubchannelRef(io.grpc.channelz.v1.SubchannelRef value) {
      if (subchannelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubchannelRefIsMutable();
        subchannelRef_.add(value);
        onChanged();
      } else {
        subchannelRefBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder addSubchannelRef(
        int index, io.grpc.channelz.v1.SubchannelRef value) {
      if (subchannelRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubchannelRefIsMutable();
        subchannelRef_.add(index, value);
        onChanged();
      } else {
        subchannelRefBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder addSubchannelRef(
        io.grpc.channelz.v1.SubchannelRef.Builder builderForValue) {
      if (subchannelRefBuilder_ == null) {
        ensureSubchannelRefIsMutable();
        subchannelRef_.add(builderForValue.build());
        onChanged();
      } else {
        subchannelRefBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder addSubchannelRef(
        int index, io.grpc.channelz.v1.SubchannelRef.Builder builderForValue) {
      if (subchannelRefBuilder_ == null) {
        ensureSubchannelRefIsMutable();
        subchannelRef_.add(index, builderForValue.build());
        onChanged();
      } else {
        subchannelRefBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder addAllSubchannelRef(
        java.lang.Iterable<? extends io.grpc.channelz.v1.SubchannelRef> values) {
      if (subchannelRefBuilder_ == null) {
        ensureSubchannelRefIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, subchannelRef_);
        onChanged();
      } else {
        subchannelRefBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder clearSubchannelRef() {
      if (subchannelRefBuilder_ == null) {
        subchannelRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        subchannelRefBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public Builder removeSubchannelRef(int index) {
      if (subchannelRefBuilder_ == null) {
        ensureSubchannelRefIsMutable();
        subchannelRef_.remove(index);
        onChanged();
      } else {
        subchannelRefBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public io.grpc.channelz.v1.SubchannelRef.Builder getSubchannelRefBuilder(
        int index) {
      return getSubchannelRefFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public io.grpc.channelz.v1.SubchannelRefOrBuilder getSubchannelRefOrBuilder(
        int index) {
      if (subchannelRefBuilder_ == null) {
        return subchannelRef_.get(index);  } else {
        return subchannelRefBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public java.util.List<? extends io.grpc.channelz.v1.SubchannelRefOrBuilder> 
         getSubchannelRefOrBuilderList() {
      if (subchannelRefBuilder_ != null) {
        return subchannelRefBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(subchannelRef_);
      }
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public io.grpc.channelz.v1.SubchannelRef.Builder addSubchannelRefBuilder() {
      return getSubchannelRefFieldBuilder().addBuilder(
          io.grpc.channelz.v1.SubchannelRef.getDefaultInstance());
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public io.grpc.channelz.v1.SubchannelRef.Builder addSubchannelRefBuilder(
        int index) {
      return getSubchannelRefFieldBuilder().addBuilder(
          index, io.grpc.channelz.v1.SubchannelRef.getDefaultInstance());
    }
    /**
     * <pre>
     * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
     * There are no ordering guarantees on the order of subchannel refs.
     * There may not be cycles in the ref graph.
     * A sub channel ref may be present in more than one channel or subchannel.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
     */
    public java.util.List<io.grpc.channelz.v1.SubchannelRef.Builder> 
         getSubchannelRefBuilderList() {
      return getSubchannelRefFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.SubchannelRef, io.grpc.channelz.v1.SubchannelRef.Builder, io.grpc.channelz.v1.SubchannelRefOrBuilder> 
        getSubchannelRefFieldBuilder() {
      if (subchannelRefBuilder_ == null) {
        subchannelRefBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.grpc.channelz.v1.SubchannelRef, io.grpc.channelz.v1.SubchannelRef.Builder, io.grpc.channelz.v1.SubchannelRefOrBuilder>(
                subchannelRef_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        subchannelRef_ = null;
      }
      return subchannelRefBuilder_;
    }

    private java.util.List<io.grpc.channelz.v1.SocketRef> socketRef_ =
      java.util.Collections.emptyList();
    private void ensureSocketRefIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        socketRef_ = new java.util.ArrayList<io.grpc.channelz.v1.SocketRef>(socketRef_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.SocketRef, io.grpc.channelz.v1.SocketRef.Builder, io.grpc.channelz.v1.SocketRefOrBuilder> socketRefBuilder_;

    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public java.util.List<io.grpc.channelz.v1.SocketRef> getSocketRefList() {
      if (socketRefBuilder_ == null) {
        return java.util.Collections.unmodifiableList(socketRef_);
      } else {
        return socketRefBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public int getSocketRefCount() {
      if (socketRefBuilder_ == null) {
        return socketRef_.size();
      } else {
        return socketRefBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public io.grpc.channelz.v1.SocketRef getSocketRef(int index) {
      if (socketRefBuilder_ == null) {
        return socketRef_.get(index);
      } else {
        return socketRefBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder setSocketRef(
        int index, io.grpc.channelz.v1.SocketRef value) {
      if (socketRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSocketRefIsMutable();
        socketRef_.set(index, value);
        onChanged();
      } else {
        socketRefBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder setSocketRef(
        int index, io.grpc.channelz.v1.SocketRef.Builder builderForValue) {
      if (socketRefBuilder_ == null) {
        ensureSocketRefIsMutable();
        socketRef_.set(index, builderForValue.build());
        onChanged();
      } else {
        socketRefBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder addSocketRef(io.grpc.channelz.v1.SocketRef value) {
      if (socketRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSocketRefIsMutable();
        socketRef_.add(value);
        onChanged();
      } else {
        socketRefBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder addSocketRef(
        int index, io.grpc.channelz.v1.SocketRef value) {
      if (socketRefBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSocketRefIsMutable();
        socketRef_.add(index, value);
        onChanged();
      } else {
        socketRefBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder addSocketRef(
        io.grpc.channelz.v1.SocketRef.Builder builderForValue) {
      if (socketRefBuilder_ == null) {
        ensureSocketRefIsMutable();
        socketRef_.add(builderForValue.build());
        onChanged();
      } else {
        socketRefBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder addSocketRef(
        int index, io.grpc.channelz.v1.SocketRef.Builder builderForValue) {
      if (socketRefBuilder_ == null) {
        ensureSocketRefIsMutable();
        socketRef_.add(index, builderForValue.build());
        onChanged();
      } else {
        socketRefBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder addAllSocketRef(
        java.lang.Iterable<? extends io.grpc.channelz.v1.SocketRef> values) {
      if (socketRefBuilder_ == null) {
        ensureSocketRefIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, socketRef_);
        onChanged();
      } else {
        socketRefBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder clearSocketRef() {
      if (socketRefBuilder_ == null) {
        socketRef_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        socketRefBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public Builder removeSocketRef(int index) {
      if (socketRefBuilder_ == null) {
        ensureSocketRefIsMutable();
        socketRef_.remove(index);
        onChanged();
      } else {
        socketRefBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public io.grpc.channelz.v1.SocketRef.Builder getSocketRefBuilder(
        int index) {
      return getSocketRefFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public io.grpc.channelz.v1.SocketRefOrBuilder getSocketRefOrBuilder(
        int index) {
      if (socketRefBuilder_ == null) {
        return socketRef_.get(index);  } else {
        return socketRefBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public java.util.List<? extends io.grpc.channelz.v1.SocketRefOrBuilder> 
         getSocketRefOrBuilderList() {
      if (socketRefBuilder_ != null) {
        return socketRefBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(socketRef_);
      }
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public io.grpc.channelz.v1.SocketRef.Builder addSocketRefBuilder() {
      return getSocketRefFieldBuilder().addBuilder(
          io.grpc.channelz.v1.SocketRef.getDefaultInstance());
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public io.grpc.channelz.v1.SocketRef.Builder addSocketRefBuilder(
        int index) {
      return getSocketRefFieldBuilder().addBuilder(
          index, io.grpc.channelz.v1.SocketRef.getDefaultInstance());
    }
    /**
     * <pre>
     * There are no ordering guarantees on the order of sockets.
     * </pre>
     *
     * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
     */
    public java.util.List<io.grpc.channelz.v1.SocketRef.Builder> 
         getSocketRefBuilderList() {
      return getSocketRefFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grpc.channelz.v1.SocketRef, io.grpc.channelz.v1.SocketRef.Builder, io.grpc.channelz.v1.SocketRefOrBuilder> 
        getSocketRefFieldBuilder() {
      if (socketRefBuilder_ == null) {
        socketRefBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.grpc.channelz.v1.SocketRef, io.grpc.channelz.v1.SocketRef.Builder, io.grpc.channelz.v1.SocketRefOrBuilder>(
                socketRef_,
                ((bitField0_ & 0x00000010) == 0x00000010),
                getParentForChildren(),
                isClean());
        socketRef_ = null;
      }
      return socketRefBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:grpc.channelz.v1.Channel)
  }

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Channel)
  private static final io.grpc.channelz.v1.Channel DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.grpc.channelz.v1.Channel();
  }

  public static io.grpc.channelz.v1.Channel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Channel>
      PARSER = new com.google.protobuf.AbstractParser<Channel>() {
    public Channel parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Channel(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Channel> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Channel> getParserForType() {
    return PARSER;
  }

  public io.grpc.channelz.v1.Channel getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

