// Copyright 2015 The gRPC Authors
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple service definition for testing the protoc plugin.
syntax = "proto3";

package grpc.testing.compiler;

option java_package = "io.grpc.testing.compiler";

message SimpleRequest {
}

message SimpleResponse {
}

message StreamingInputCallRequest {
}

message StreamingInputCallResponse {
}

message StreamingOutputCallRequest {
}

message StreamingOutputCallResponse {
}

// Test service that supports all call types.
service TestService {
  // One request followed by one response.
  // The server returns the client payload as-is.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  rpc StreamingOutputCall(StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by one response (streamed upload).
  // The server returns the aggregated size of client payload as the result.
  rpc StreamingInputCall(stream StreamingInputCallRequest)
      returns (StreamingInputCallResponse);

  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full bidirectionality.
  rpc FullBidiCall(stream StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by a sequence of responses.
  // The server buffers all the client requests and then serves them in order. A
  // stream of responses are returned to the client when the server starts with
  // first request.
  rpc HalfBidiCall(stream StreamingOutputCallRequest)
      returns (stream StreamingOutputCallResponse);

  // An RPC method whose Java name collides with a keyword, and whose generated
  // method should have a '_' appended.
  rpc Import(stream StreamingInputCallRequest) returns (stream StreamingInputCallResponse);
}

// Test service that has been deprecated and should generate with Java's @Deprecated annotation
service TestDeprecatedService {
  option deprecated = true;

  // An RPC method that has been deprecated and should generate with Java's @Deprecated annotation
  rpc DeprecatedMethod(SimpleRequest) returns (SimpleResponse) {
    option deprecated = true;
  }
}