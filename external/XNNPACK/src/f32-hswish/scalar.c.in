// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <xnnpack/common.h>
#include <xnnpack/math.h>
#include <xnnpack/vbinary.h>


$MIN_F32 = "__builtin_wasm_min_f32" if WASM else "math_min_f32"
$MAX_F32 = "__builtin_wasm_max_f32" if WASM else "math_max_f32"
void xnn_f32_hswish_ukernel__${"wasm" if WASM else "scalar"}_x${BATCH_TILE}(
    size_t n,
    const float* x,
    float* y,
    const union xnn_f32_hswish_params params[restrict static 1])
{
  assert(n != 0);
  assert(n % sizeof(float) == 0);

  const float vsixth = params->scalar.sixth;
  const float vhalf = params->scalar.half;
  const float vone = params->scalar.one;
  assert(vhalf == 0.5f);
  assert(vone == 1.0f);

  $if BATCH_TILE > 1:
    for (; n >= ${BATCH_TILE} * sizeof(float); n -= ${BATCH_TILE} * sizeof(float)) {
      $for N in range(BATCH_TILE):
        const float vx${ABC[N]} = x[${N}];
      x += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        float vacc${ABC[N]} = vx${ABC[N]} * vsixth + vhalf;

      $for N in range(BATCH_TILE):
        vacc${ABC[N]} = ${MAX_F32}(vacc${ABC[N]}, 0.0f);

      $for N in range(BATCH_TILE):
        vacc${ABC[N]} = ${MIN_F32}(vacc${ABC[N]}, vone);

      $for N in range(BATCH_TILE):
        vacc${ABC[N]} *= vx${ABC[N]};

      $for N in range(BATCH_TILE):
        y[${N}] = vacc${ABC[N]};
      y += ${BATCH_TILE};
    }
    if XNN_UNLIKELY(n != 0) {
      $if BATCH_TILE > 2:
        do {
          const float vx = *x++;
          float vacc = vx * vsixth + vhalf;
          vacc = ${MAX_F32}(vacc, 0.0f);
          vacc = ${MIN_F32}(vacc, vone);
          vacc = vacc * vx;
          *y++ = vacc;
          n -= sizeof(float);
        } while (n != 0);
      $else:
        const float vx = *x;
        float vacc = vx * vsixth + vhalf;
        vacc = ${MAX_F32}(vacc, 0.0f);
        vacc = ${MIN_F32}(vacc, vone);
        vacc = vacc * vx;
        *y = vacc;
    }
  $else:
    for (; n >= sizeof(float); n -= sizeof(float)) {
      const float vx = *x++;
      float vacc = vx * vsixth + vhalf;
      vacc = ${MAX_F32}(vacc, 0.0f);
      vacc = ${MIN_F32}(vacc, vone);
      vacc = vacc * vx;
      *y++ = vacc;
    }
}
