// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/common.h>
#include <xnnpack/vbinary.h>


void xnn_f32_hswish_ukernel__${"neonfma" if FMA else "neon"}_x${BATCH_TILE}(
    size_t n,
    const float* x,
    float* y,
    const union xnn_f32_hswish_params params[restrict static 1])
{
  assert(n != 0);
  assert(n % sizeof(float) == 0);

  const float32x4_t vsixth = vld1q_dup_f32(&params->scalar.sixth);
  const float32x4_t vhalf = vld1q_dup_f32(&params->scalar.half);
  const float32x4_t vone = vld1q_dup_f32(&params->scalar.one);
  const float32x4_t vzero = vdupq_n_f32(0.0f);

  for (; n >= ${BATCH_TILE} * sizeof(float); n -= ${BATCH_TILE} * sizeof(float)) {
    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vx${ABC[N:N+4]} = vld1q_f32(x); x += 4;

    $for N in range(0, BATCH_TILE, 4):
      $if FMA:
        float32x4_t vacc${ABC[N:N+4]} = vfmaq_f32(vhalf, vx${ABC[N:N+4]}, vsixth);
      $else:
        float32x4_t vacc${ABC[N:N+4]} = vmlaq_f32(vhalf, vx${ABC[N:N+4]}, vsixth);

    $for N in range(0, BATCH_TILE, 4):
      vacc${ABC[N:N+4]} = vmaxq_f32(vacc${ABC[N:N+4]}, vzero);

    $for N in range(0, BATCH_TILE, 4):
      vacc${ABC[N:N+4]} = vminq_f32(vacc${ABC[N:N+4]}, vone);

    $for N in range(0, BATCH_TILE, 4):
      vacc${ABC[N:N+4]} = vmulq_f32(vacc${ABC[N:N+4]}, vx${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vst1q_f32(y, vacc${ABC[N:N+4]}); y += 4;
  }
  $if BATCH_TILE >= 4:
    for (; n >= 4 * sizeof(float); n -= 4 * sizeof(float)) {
      const float32x4_t vx0123 = vld1q_f32(x); x += 4;
      $if FMA:
        float32x4_t vacc0123 = vfmaq_f32(vhalf, vx0123, vsixth);
      $else:
        float32x4_t vacc0123 = vmlaq_f32(vhalf, vx0123, vsixth);
      vacc0123 = vmaxq_f32(vacc0123, vzero);
      vacc0123 = vminq_f32(vacc0123, vone);
      vacc0123 = vmulq_f32(vacc0123, vx0123);
      vst1q_f32(y, vacc0123); y += 4;
    }
  if XNN_UNLIKELY(n != 0) {
    const float32x4_t vx0123 = vld1q_f32(x);
    $if FMA:
      float32x4_t vacc0123 = vfmaq_f32(vhalf, vx0123, vsixth);
    $else:
      float32x4_t vacc0123 = vmlaq_f32(vhalf, vx0123, vsixth);
    vacc0123 = vmaxq_f32(vacc0123, vzero);
    vacc0123 = vminq_f32(vacc0123, vone);
    vacc0123 = vmulq_f32(vacc0123, vx0123);

    float32x2_t vacc01 = vget_low_f32(vacc0123);
    if (n & (2 * sizeof(float))) {
      vst1_f32(y, vacc01); y += 2;
      vacc01 = vget_high_f32(vacc0123);
    }
    if (n & (1 * sizeof(float))) {
      vst1_lane_f32(y, vacc01, 0);
    }
  }
}
