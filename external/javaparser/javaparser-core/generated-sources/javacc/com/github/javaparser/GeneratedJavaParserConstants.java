/* Generated By:JavaCC: Do not edit this line. GeneratedJavaParserConstants.java */
/*
 * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
 * Copyright (C) 2011, 2013-2016 The JavaParser Team.
 *
 * This file is part of JavaParser.
 *
 * JavaParser can be used either under the terms of
 * a) the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 * b) the terms of the Apache License
 *
 * You should have received a copy of both licenses in LICENCE.LGPL and
 * LICENCE.APACHE. Please refer to those files for details.
 *
 * JavaParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 */
package com.github.javaparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GeneratedJavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 1;
  /** RegularExpression Id. */
  int WINDOWS_EOL = 2;
  /** RegularExpression Id. */
  int UNIX_EOL = 3;
  /** RegularExpression Id. */
  int OLD_MAC_EOL = 4;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int ENTER_JAVADOC_COMMENT = 6;
  /** RegularExpression Id. */
  int ENTER_MULTILINE_COMMENT = 7;
  /** RegularExpression Id. */
  int JAVADOC_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int COMMENT_CONTENT = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 11;
  /** RegularExpression Id. */
  int ASSERT = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int BREAK = 14;
  /** RegularExpression Id. */
  int BYTE = 15;
  /** RegularExpression Id. */
  int CASE = 16;
  /** RegularExpression Id. */
  int CATCH = 17;
  /** RegularExpression Id. */
  int CHAR = 18;
  /** RegularExpression Id. */
  int CLASS = 19;
  /** RegularExpression Id. */
  int CONST = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int _DEFAULT = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int ENUM = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int FINAL = 29;
  /** RegularExpression Id. */
  int FINALLY = 30;
  /** RegularExpression Id. */
  int FLOAT = 31;
  /** RegularExpression Id. */
  int FOR = 32;
  /** RegularExpression Id. */
  int GOTO = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int IMPLEMENTS = 35;
  /** RegularExpression Id. */
  int IMPORT = 36;
  /** RegularExpression Id. */
  int INSTANCEOF = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int INTERFACE = 39;
  /** RegularExpression Id. */
  int LONG = 40;
  /** RegularExpression Id. */
  int NATIVE = 41;
  /** RegularExpression Id. */
  int NEW = 42;
  /** RegularExpression Id. */
  int NULL = 43;
  /** RegularExpression Id. */
  int PACKAGE = 44;
  /** RegularExpression Id. */
  int PRIVATE = 45;
  /** RegularExpression Id. */
  int PROTECTED = 46;
  /** RegularExpression Id. */
  int PUBLIC = 47;
  /** RegularExpression Id. */
  int RETURN = 48;
  /** RegularExpression Id. */
  int SHORT = 49;
  /** RegularExpression Id. */
  int STATIC = 50;
  /** RegularExpression Id. */
  int STRICTFP = 51;
  /** RegularExpression Id. */
  int SUPER = 52;
  /** RegularExpression Id. */
  int SWITCH = 53;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 54;
  /** RegularExpression Id. */
  int THIS = 55;
  /** RegularExpression Id. */
  int THROW = 56;
  /** RegularExpression Id. */
  int THROWS = 57;
  /** RegularExpression Id. */
  int TRANSIENT = 58;
  /** RegularExpression Id. */
  int TRUE = 59;
  /** RegularExpression Id. */
  int TRY = 60;
  /** RegularExpression Id. */
  int VOID = 61;
  /** RegularExpression Id. */
  int VOLATILE = 62;
  /** RegularExpression Id. */
  int WHILE = 63;
  /** RegularExpression Id. */
  int REQUIRES = 64;
  /** RegularExpression Id. */
  int TO = 65;
  /** RegularExpression Id. */
  int WITH = 66;
  /** RegularExpression Id. */
  int OPEN = 67;
  /** RegularExpression Id. */
  int OPENS = 68;
  /** RegularExpression Id. */
  int USES = 69;
  /** RegularExpression Id. */
  int MODULE = 70;
  /** RegularExpression Id. */
  int EXPORTS = 71;
  /** RegularExpression Id. */
  int PROVIDES = 72;
  /** RegularExpression Id. */
  int TRANSITIVE = 73;
  /** RegularExpression Id. */
  int LONG_LITERAL = 74;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 75;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 76;
  /** RegularExpression Id. */
  int HEX_LITERAL = 77;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 78;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 79;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 80;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 81;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 82;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 84;
  /** RegularExpression Id. */
  int HEX_DIGITS = 85;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE = 86;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 87;
  /** RegularExpression Id. */
  int STRING_LITERAL = 88;
  /** RegularExpression Id. */
  int IDENTIFIER = 89;
  /** RegularExpression Id. */
  int LETTER = 90;
  /** RegularExpression Id. */
  int PART_LETTER = 91;
  /** RegularExpression Id. */
  int LPAREN = 92;
  /** RegularExpression Id. */
  int RPAREN = 93;
  /** RegularExpression Id. */
  int LBRACE = 94;
  /** RegularExpression Id. */
  int RBRACE = 95;
  /** RegularExpression Id. */
  int LBRACKET = 96;
  /** RegularExpression Id. */
  int RBRACKET = 97;
  /** RegularExpression Id. */
  int SEMICOLON = 98;
  /** RegularExpression Id. */
  int COMMA = 99;
  /** RegularExpression Id. */
  int DOT = 100;
  /** RegularExpression Id. */
  int AT = 101;
  /** RegularExpression Id. */
  int ASSIGN = 102;
  /** RegularExpression Id. */
  int LT = 103;
  /** RegularExpression Id. */
  int BANG = 104;
  /** RegularExpression Id. */
  int TILDE = 105;
  /** RegularExpression Id. */
  int HOOK = 106;
  /** RegularExpression Id. */
  int COLON = 107;
  /** RegularExpression Id. */
  int EQ = 108;
  /** RegularExpression Id. */
  int LE = 109;
  /** RegularExpression Id. */
  int GE = 110;
  /** RegularExpression Id. */
  int NE = 111;
  /** RegularExpression Id. */
  int SC_OR = 112;
  /** RegularExpression Id. */
  int SC_AND = 113;
  /** RegularExpression Id. */
  int INCR = 114;
  /** RegularExpression Id. */
  int DECR = 115;
  /** RegularExpression Id. */
  int PLUS = 116;
  /** RegularExpression Id. */
  int MINUS = 117;
  /** RegularExpression Id. */
  int STAR = 118;
  /** RegularExpression Id. */
  int SLASH = 119;
  /** RegularExpression Id. */
  int BIT_AND = 120;
  /** RegularExpression Id. */
  int BIT_OR = 121;
  /** RegularExpression Id. */
  int XOR = 122;
  /** RegularExpression Id. */
  int REM = 123;
  /** RegularExpression Id. */
  int LSHIFT = 124;
  /** RegularExpression Id. */
  int PLUSASSIGN = 125;
  /** RegularExpression Id. */
  int MINUSASSIGN = 126;
  /** RegularExpression Id. */
  int STARASSIGN = 127;
  /** RegularExpression Id. */
  int SLASHASSIGN = 128;
  /** RegularExpression Id. */
  int ANDASSIGN = 129;
  /** RegularExpression Id. */
  int ORASSIGN = 130;
  /** RegularExpression Id. */
  int XORASSIGN = 131;
  /** RegularExpression Id. */
  int REMASSIGN = 132;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 133;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 134;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 135;
  /** RegularExpression Id. */
  int ELLIPSIS = 136;
  /** RegularExpression Id. */
  int ARROW = 137;
  /** RegularExpression Id. */
  int DOUBLECOLON = 138;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 139;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 140;
  /** RegularExpression Id. */
  int GT = 141;
  /** RegularExpression Id. */
  int CTRL_Z = 142;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVADOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACE>",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<ENTER_JAVADOC_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<COMMENT_CONTENT>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"requires\"",
    "\"to\"",
    "\"with\"",
    "\"open\"",
    "\"opens\"",
    "\"uses\"",
    "\"module\"",
    "\"exports\"",
    "\"provides\"",
    "\"transitive\"",
    "<LONG_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<HEX_DIGITS>",
    "<UNICODE_ESCAPE>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"->\"",
    "\"::\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"\\u001a\"",
  };

}
