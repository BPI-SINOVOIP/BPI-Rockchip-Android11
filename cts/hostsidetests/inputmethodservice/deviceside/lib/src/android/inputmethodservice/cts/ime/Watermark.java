/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.inputmethodservice.cts.ime;

import android.graphics.Bitmap;

import androidx.annotation.NonNull;
import androidx.annotation.Size;

/**
 * A utility class to put a unique image on the software keyboard so that whether the software
 * keyboard is visible to the user or not can be determined from the screenshot.
 */
public enum Watermark {

    /**
     * A unique (64x64) image for the test IME 1.
     */
    IME1(new long[] {
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100011111011001110101101100000001101101011100110111110011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111100000100110001010010011111110010010100011001000001111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001110011111011001110101101100000001101101011100110111110011000L,
            0b0001110101001011101111000011110111011110000111101110100101011000L,
            0b0001100100000100110001010010011111110010010100011001000001011000L,
            0b0001101110110100010000111100001000100001111000010001011011111000L,
            0b0001111111111011001110101101100000001101101011100110111111111000L,
            0b0001110011001011101111000011110111011110000111101110100110011000L,
            0b0001100001000100110001010010011111110010010100011001000100011000L,
            0b0001101101010100010000111100001000100001111000010001010101111000L,
            0b0001111110011011001110101101100000001101101011100110110011111000L,
            0b0001110010111011101111000011110111011110000111101110111010011000L,
            0b0001100001111100110001010010011111110010010100011001111100011000L,
            0b0001101101001000010000111100001000100001111000010000100101111000L,
            0b0001111110000101001110101101100000001101101011100101000011111000L,
            0b0001110010110100101111000011110111011110000111101001011010011000L,
            0b0001100001111011110001010010011111110010010100011110111100011000L,
            0b0001101101001011100000111100001000100001111000001110100101111000L,
            0b0001111110000100010110101101100000001101101011010001000011111000L,
            0b0001110010110100010011000011110111011110000110010001011010011000L,
            0b0001100001111011101111010010011111110010010111101110111100011000L,
            0b0001101101001011101111011100001000100001110111101110100101111000L,
            0b0001111110000100010001011101100000001101110100010001000011111000L,
            0b0001110010110100010000111101110111011101111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
    }),

    /**
     * A unique (64x64) image for the test IME 2.
     */
    IME2(new long[] {
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111100000100110001010010011111110010010100011001000001111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100011111011001110101101100000001101101011100110111110011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001101100000100110001010010011111110010010100011001000001111000L,
            0b0001101010110100010000111100001000100001111000010001011010111000L,
            0b0001111011111011001110101101100000001101101011100110111110111000L,
            0b0001110001001011101111000011110111011110000111101110100100011000L,
            0b0001100000000100110001010010011111110010010100011001000000011000L,
            0b0001101100110100010000111100001000100001111000010001011001111000L,
            0b0001111110111011001110101101100000001101101011100110111011111000L,
            0b0001110010101011101111000011110111011110000111101110101010011000L,
            0b0001100001100100110001010010011111110010010100011001001100011000L,
            0b0001101101000100010000111100001000100001111000010001000101111000L,
            0b0001111110000011001110101101100000001101101011100110000011111000L,
            0b0001110010110111101111000011110111011110000111101111011010011000L,
            0b0001100001111010110001010010011111110010010100011010111100011000L,
            0b0001101101001011010000111100001000100001111000010110100101111000L,
            0b0001111110000100001110101101100000001101101011100001000011111000L,
            0b0001110010110100011111000011110111011110000111110001011010011000L,
            0b0001100001111011101001010010011111110010010100101110111100011000L,
            0b0001101101001011101100111100001000100001111001101110100101111000L,
            0b0001111110000100010000101101100000001101101000010001000011111000L,
            0b0001110010110100010000100011110111011110001000010001011010011000L,
            0b0001100001111011101110100010011111110010001011101110111100011000L,
            0b0001101101001011101111000010001000100010000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001101101001011101111000011110111011110000111101110100101111000L,
            0b0001111110000100010001011010011101110010110100010001000011111000L,
            0b0001110010110100010000111100001000100001111000010001011010011000L,
            0b0001100001111011101110100101100010001101001011101110111100011000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0001111111111111111111111111111111111111111111111111111111111000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
    });

    private final BitmapImage mImage;

    Watermark(@NonNull @Size(value = 64) long[] bitImage) {
        final int size = 64;
        if (bitImage.length != size) {
            throw new UnsupportedOperationException("bitImage.length=" + bitImage.length
                    + " must be " + size);
        }
        final long mask = 0b1000000000000000000000000000000000000000000000000000000000000000L;
        final int[] pixels = new int[size * size];
        for (int y = 0; y < size; ++y) {
            for (int x = 0; x < size; ++x) {
                pixels[y * size + x] =
                        ((bitImage[y] << x) & mask) == mask ? 0xffffffff : 0xff000000;
            }
        }
        mImage = new BitmapImage(pixels, size, size);
    }

    /**
     * @return {@link Bitmap} object of the unique image.
     */
    public Bitmap toBitmap() {
        return mImage.toBitmap();
    }

    /**
     * Check the unique image can be found in the specified {@link Bitmap}.
     *
     * @param bitmap {@link Bitmap} to be checked.
     * @return {@code true} if the corresponding unique image is found in the {@code bitmap}.
     */
    public boolean isContainedIn(@NonNull Bitmap bitmap) {
        final BitmapImage targetImage = BitmapImage.createFromBitmap(bitmap);
        // Search from the bottom line with an assumption that the IME is shown at the bottom.
        for (int offsetY = targetImage.getHeight() - 1; offsetY >= 0; --offsetY) {
            for (int offsetX = 0; offsetX < targetImage.getWidth(); ++offsetX) {
                if (mImage.match(targetImage, offsetX, offsetY)) {
                    return true;
                }
            }
        }
        return false;
    }
}
