/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "../includes/common.h"
#include "../includes/memutils_track.h"
#include <android/IMediaExtractor.h>
#include <datasource/DataSourceFactory.h>
#include <dlfcn.h>
#include <media/DataSource.h>
#include <media/IMediaHTTPService.h>
#include <media/stagefright/DataSourceBase.h>
#include <media/stagefright/MediaExtractor.h>
#include <media/stagefright/MetaData.h>

#define LIBNAME "/system/lib64/extractors/libmp4extractor.so"
#define LIBNAME_APEX                                                           \
  "/apex/com.android.media/lib64/extractors/libmp4extractor.so"

#define PSSH_BOX_SIZE 1048576
char enable_selective_overload = ENABLE_NONE;
using namespace android;

bool is_tracking_required(size_t size) { return (size == PSSH_BOX_SIZE); }

int main(int argc, char *argv[]) {
  (void)argc;
  (void)argv;

#if _64_BIT
  GetExtractorDef getDef = nullptr;
  if (argc < 2) {
    return EXIT_FAILURE;
  }

  void *libHandle = dlopen(LIBNAME, RTLD_NOW | RTLD_LOCAL);
  if (!libHandle) {
    libHandle = dlopen(LIBNAME_APEX, RTLD_NOW | RTLD_LOCAL);
    if (!libHandle) {
      return EXIT_FAILURE;
    }
  }

  getDef = (GetExtractorDef)dlsym(libHandle, "GETEXTRACTORDEF");
  if (!getDef) {
    dlclose(libHandle);
    return EXIT_FAILURE;
  }

  sp<DataSourceFactory> dsf = DataSourceFactory::getInstance();
  sp<DataSource> dataSource = dsf->CreateFromURI(NULL, argv[1]);
  if (dataSource == nullptr) {
    dlclose(libHandle);
    return EXIT_FAILURE;
  }

  void *meta = nullptr;
  void *creator = nullptr;
  FreeMetaFunc freeMeta = nullptr;
  float confidence;
  if (getDef().def_version == EXTRACTORDEF_VERSION_NDK_V1) {
    creator = (void *)getDef().u.v2.sniff(dataSource->wrap(), &confidence,
                                          &meta, &freeMeta);
  } else if (getDef().def_version == EXTRACTORDEF_VERSION_NDK_V2) {
    creator = (void *)getDef().u.v3.sniff(dataSource->wrap(), &confidence,
                                          &meta, &freeMeta);
  }
  if (!creator) {
    dlclose(libHandle);
    return EXIT_FAILURE;
  }

  CMediaExtractor *ret = ((CreatorFunc)creator)(dataSource->wrap(), meta);
  if (ret == nullptr) {
    dlclose(libHandle);
    return EXIT_FAILURE;
  }

  if (meta != nullptr && freeMeta != nullptr) {
    freeMeta(meta);
  }

  sp<MetaData> metaData = new MetaData();
  MediaExtractorCUnwrapper *mediaExtractorCUnwrapper =
      new MediaExtractorCUnwrapper(ret);
  enable_selective_overload = ENABLE_MALLOC_CHECK;
  mediaExtractorCUnwrapper->getTrackMetaData(*metaData.get(), 0, 1);
  enable_selective_overload = ENABLE_NONE;

  dlclose(libHandle);
#endif /* _64_BIT */

  return EXIT_SUCCESS;
}
