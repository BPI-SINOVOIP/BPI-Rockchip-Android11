diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
old mode 100644
new mode 100755
index 5ac25522ad5..532c9a643e9
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -3523,33 +3523,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 return;
             }
 
-            if (!mBootAnimationStopped) {
-                Trace.asyncTraceBegin(TRACE_TAG_WINDOW_MANAGER, "Stop bootanim", 0);
-                // stop boot animation
-                // formerly we would just kill the process, but we now ask it to exit so it
-                // can choose where to stop the animation.
-                SystemProperties.set("service.bootanim.exit", "1");
-                mBootAnimationStopped = true;
-            }
-
-            if (!mForceDisplayEnabled && !checkBootAnimationCompleteLocked()) {
-                if (DEBUG_BOOT) Slog.i(TAG_WM, "performEnableScreen: Waiting for anim complete");
-                return;
-            }
 
-            try {
-                IBinder surfaceFlinger = ServiceManager.getService("SurfaceFlinger");
-                if (surfaceFlinger != null) {
-                    Slog.i(TAG_WM, "******* TELLING SURFACE FLINGER WE ARE BOOTED!");
-                    Parcel data = Parcel.obtain();
-                    data.writeInterfaceToken("android.ui.ISurfaceComposer");
-                    surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION, // BOOT_FINISHED
-                            data, null, 0);
-                    data.recycle();
-                }
-            } catch (RemoteException ex) {
-                Slog.e(TAG_WM, "Boot completed: SurfaceFlinger is dead!");
-            }
 
             EventLog.writeEvent(EventLogTags.WM_BOOT_ANIMATION_DONE, SystemClock.uptimeMillis());
             Trace.asyncTraceEnd(TRACE_TAG_WINDOW_MANAGER, "Stop bootanim", 0);
@@ -3566,6 +3540,42 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         mPolicy.enableScreenAfterBoot();
+        Slog.d(TAG_WM,"caijq delay boot animation exit ....");
+        try{
+            Thread.sleep(4000);
+            }catch(InterruptedException  e)
+        {
+            Slog.e(TAG_WM,"Sleep exception:",e);
+        }
+        if (!mBootAnimationStopped) {
+            Trace.asyncTraceBegin(TRACE_TAG_WINDOW_MANAGER, "Stop bootanim", 0);
+            // stop boot animation
+            // formerly we would just kill the process, but we now ask it to exit so it
+            // can choose where to stop the animation.
+            SystemProperties.set("service.bootanim.exit", "1");
+            mBootAnimationStopped = true;
+        }
+        
+        if (!mForceDisplayEnabled && !checkBootAnimationCompleteLocked()) {
+            if (DEBUG_BOOT) Slog.i(TAG_WM, "performEnableScreen: Waiting for anim complete");
+            return;
+        }
+        
+        try {
+            IBinder surfaceFlinger = ServiceManager.getService("SurfaceFlinger");
+            if (surfaceFlinger != null) {
+                Slog.i(TAG_WM, "******* TELLING SURFACE FLINGER WE ARE BOOTED!");
+                Parcel data = Parcel.obtain();
+                data.writeInterfaceToken("android.ui.ISurfaceComposer");
+                surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION, // BOOT_FINISHED
+                        data, null, 0);
+                data.recycle();
+            }
+        } catch (RemoteException ex) {
+            Slog.e(TAG_WM, "Boot completed: SurfaceFlinger is dead!");
+        }
+
+        
 
         // Make sure the last requested orientation has been applied.
         updateRotationUnchecked(false, false);
