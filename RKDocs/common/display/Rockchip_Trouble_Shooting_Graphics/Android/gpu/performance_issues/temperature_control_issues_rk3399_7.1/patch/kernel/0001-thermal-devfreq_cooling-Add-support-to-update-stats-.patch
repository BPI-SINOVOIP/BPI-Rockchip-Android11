From 038aaed4a977da2235f80773df56dff836f86cf8 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Thu, 11 Jul 2019 15:10:49 +0800
Subject: [PATCH] thermal: devfreq_cooling: Add support to update stats when
 get requested power

The power_allocator thermal governor should get utilization of cooling
device to calculate dynamic power, but the powersave, userspace and performance
devfreq governor don't updade stats, so the utilization is inaccurate.

This patch adds support to update status when get requested power, so that
power_allocator can also work properly when use powersave, userspace and
performance devfreq governor.

Change-Id: Ic98fabf46f693a60b0f07094c59e75e4d141e42c
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/devfreq/governor_performance.c | 3 +++
 drivers/devfreq/governor_powersave.c   | 3 +++
 drivers/devfreq/governor_userspace.c   | 2 ++
 drivers/thermal/devfreq_cooling.c      | 7 +++++++
 include/linux/devfreq.h                | 2 ++
 5 files changed, 17 insertions(+)

diff --git a/drivers/devfreq/governor_performance.c b/drivers/devfreq/governor_performance.c
index 94a91f4..3e94cc5 100644
--- a/drivers/devfreq/governor_performance.c
+++ b/drivers/devfreq/governor_performance.c
@@ -33,6 +33,9 @@ static int devfreq_performance_handler(struct devfreq *devfreq,
 		mutex_lock(&devfreq->lock);
 		ret = update_devfreq(devfreq);
 		mutex_unlock(&devfreq->lock);
+		devfreq->last_status.update = true;
+	} else if (event == DEVFREQ_GOV_STOP) {
+		devfreq->last_status.update = false;
 	}
 
 	return ret;
diff --git a/drivers/devfreq/governor_powersave.c b/drivers/devfreq/governor_powersave.c
index 4395634..8d820df 100644
--- a/drivers/devfreq/governor_powersave.c
+++ b/drivers/devfreq/governor_powersave.c
@@ -33,6 +33,9 @@ static int devfreq_powersave_handler(struct devfreq *devfreq,
 		mutex_lock(&devfreq->lock);
 		ret = update_devfreq(devfreq);
 		mutex_unlock(&devfreq->lock);
+		devfreq->last_status.update = true;
+	} else {
+		devfreq->last_status.update = false;
 	}
 
 	return ret;
diff --git a/drivers/devfreq/governor_userspace.c b/drivers/devfreq/governor_userspace.c
index 3e244c9..7c1ec16 100644
--- a/drivers/devfreq/governor_userspace.c
+++ b/drivers/devfreq/governor_userspace.c
@@ -123,9 +123,11 @@ static int devfreq_userspace_handler(struct devfreq *devfreq,
 	switch (event) {
 	case DEVFREQ_GOV_START:
 		ret = userspace_init(devfreq);
+		devfreq->last_status.update = true;
 		break;
 	case DEVFREQ_GOV_STOP:
 		userspace_exit(devfreq);
+		devfreq->last_status.update = false;
 		break;
 	default:
 		break;
diff --git a/drivers/thermal/devfreq_cooling.c b/drivers/thermal/devfreq_cooling.c
index c549d83..1b688a1 100644
--- a/drivers/thermal/devfreq_cooling.c
+++ b/drivers/thermal/devfreq_cooling.c
@@ -283,6 +283,13 @@ static int devfreq_cooling_get_requested_power(struct thermal_cooling_device *cd
 	unsigned long freq = status->current_frequency;
 	u32 dyn_power, static_power;
 
+	if (status->update) {
+		if (devfreq_update_stats(df)) {
+			status->busy_time = 1;
+			status->total_time = 1;
+		}
+	}
+
 	/* Get dynamic power for state */
 	state = freq_get_state(dfc, freq);
 	if (state == THERMAL_CSTATE_INVALID)
diff --git a/include/linux/devfreq.h b/include/linux/devfreq.h
index 978b3d3..82ec4a3 100644
--- a/include/linux/devfreq.h
+++ b/include/linux/devfreq.h
@@ -41,6 +41,7 @@ struct devfreq;
  * @busy_time:		The time that the device was working among the
  *			total_time.
  * @current_frequency:	The operating frequency.
+ * @update:		Whether need to update total_time and busy_time.
  * @private_data:	An entry not specified by the devfreq framework.
  *			A device and a specific governor may have their
  *			own protocol with private_data. However, because
@@ -52,6 +53,7 @@ struct devfreq_dev_status {
 	unsigned long total_time;
 	unsigned long busy_time;
 	unsigned long current_frequency;
+	bool update;
 	void *private_data;
 };
 
-- 
2.7.4

