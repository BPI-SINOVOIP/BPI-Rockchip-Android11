// Generated from log.mod.py
// DO NOT EDIT
// clang-format off
#include "TestHarness.h"
using namespace test_helper;

namespace generated_tests::log {

const TestModel& get_test_model() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 1.0f, 1.1f, 1.2f, 1.3f, 1.4f, 1.5f, 1.6f, 1.7f, 1.8f, 1.9f, 2.0f, 2.1f, 2.2f, 2.3f, 2.4f, 2.5f, 2.6f, 2.7f, 2.8f, 2.9f, 3.0f, 3.1f, 3.2f, 3.3f, 3.4f, 3.5f, 3.6f, 3.7f, 3.8f, 3.9f, 4.0f, 4.1f, 4.2f, 4.3f, 4.4f, 4.5f, 4.6f, 4.7f, 4.8f, 4.9f, 5.0f, 5.1f, 5.2f, 5.3f, 5.4f, 5.5f, 5.6f, 5.7f, 5.8f, 5.9f, 6.0f, 6.1f, 6.2f, 6.3f, 6.4f, 6.5f, 6.6f, 6.7f, 6.8f, 6.9f, 7.0f, 7.1f, 7.2f, 7.3f, 7.4f, 7.5f, 7.6f, 7.7f, 7.8f, 7.9f, 8.0f, 8.1f, 8.2f, 8.3f, 8.4f, 8.5f, 8.6f, 8.7f, 8.8f, 8.9f, 9.0f, 9.1f, 9.2f, 9.3f, 9.4f, 9.5f, 9.6f, 9.7f, 9.8f, 9.9f, 10.0f, 10.1f, 10.2f, 10.3f, 10.4f, 10.5f, 10.6f, 10.7f, 10.8f, 10.9f, 11.0f, 11.1f, 11.2f, 11.3f, 11.4f, 11.5f, 11.6f, 11.7f, 11.8f, 11.9f, 12.0f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-2.3025850929940455f, -1.6094379124341003f, -1.2039728043259361f, -0.916290731874155f, -0.6931471805599453f, -0.5108256237659907f, -0.35667494393873245f, -0.2231435513142097f, -0.10536051565782628f, 0.0f, 0.09531017980432493f, 0.1823215567939546f, 0.26236426446749106f, 0.3364722366212129f, 0.4054651081081644f, 0.47000362924573563f, 0.5306282510621704f, 0.5877866649021191f, 0.6418538861723947f, 0.6931471805599453f, 0.7419373447293773f, 0.7884573603642703f, 0.8329091229351039f, 0.8754687373538999f, 0.9162907318741551f, 0.9555114450274363f, 0.9932517730102834f, 1.0296194171811581f, 1.0647107369924282f, 1.0986122886681098f, 1.1314021114911006f, 1.1631508098056809f, 1.1939224684724346f, 1.2237754316221157f, 1.252762968495368f, 1.2809338454620642f, 1.308332819650179f, 1.33500106673234f, 1.3609765531356006f, 1.3862943611198906f, 1.410986973710262f, 1.4350845252893227f, 1.4586150226995167f, 1.4816045409242156f, 1.5040773967762742f, 1.5260563034950492f, 1.547562508716013f, 1.5686159179138452f, 1.589235205116581f, 1.6094379124341003f, 1.62924053973028f, 1.6486586255873816f, 1.667706820558076f, 1.6863989535702288f, 1.7047480922384253f, 1.7227665977411035f, 1.7404661748405046f, 1.7578579175523736f, 1.7749523509116738f, 1.791759469228055f, 1.8082887711792655f, 1.824549292051046f, 1.840549633397487f, 1.8562979903656263f, 1.8718021769015913f, 1.8870696490323797f, 1.9021075263969205f, 1.916922612182061f, 1.9315214116032138f, 1.9459101490553132f, 1.9600947840472698f, 1.9740810260220096f, 1.9878743481543455f, 2.0014800002101243f, 2.0149030205422647f, 2.028148247292285f, 2.0412203288596382f, 2.0541237336955462f, 2.066862759472976f, 2.0794415416798357f, 2.0918640616783932f, 2.1041341542702074f, 2.1162555148025524f, 2.128231705849268f, 2.1400661634962708f, 2.151762203259462f, 2.163323025660538f, 2.174751721484161f, 2.186051276738094f, 2.1972245773362196f, 2.2082744135228043f, 2.2192034840549946f, 2.2300144001592104f, 2.2407096892759584f, 2.2512917986064953f, 2.2617630984737906f, 2.272125885509337f, 2.2823823856765264f, 2.2925347571405443f, 2.302585092994046f, 2.312535423847214f, 2.322387720290225f, 2.33214389523559f, 2.341805806147327f, 2.3513752571634776f, 2.3608540011180215f, 2.3702437414678603f, 2.379546134130174f, 2.388762789235098f, 2.3978952727983707f, 2.4069451083182885f, 2.4159137783010487f, 2.424802725718295f, 2.4336133554004498f, 2.4423470353692043f, 2.451005098112319f, 2.4595888418037104f, 2.468099531471619f, 2.4765384001174837f, 2.4849066497880004f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::LOG
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_2,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model = TestModelManager::get().add("log", get_test_model());

}  // namespace generated_tests::log

namespace generated_tests::log {

const TestModel& get_test_model_relaxed() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = true,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 1.0f, 1.1f, 1.2f, 1.3f, 1.4f, 1.5f, 1.6f, 1.7f, 1.8f, 1.9f, 2.0f, 2.1f, 2.2f, 2.3f, 2.4f, 2.5f, 2.6f, 2.7f, 2.8f, 2.9f, 3.0f, 3.1f, 3.2f, 3.3f, 3.4f, 3.5f, 3.6f, 3.7f, 3.8f, 3.9f, 4.0f, 4.1f, 4.2f, 4.3f, 4.4f, 4.5f, 4.6f, 4.7f, 4.8f, 4.9f, 5.0f, 5.1f, 5.2f, 5.3f, 5.4f, 5.5f, 5.6f, 5.7f, 5.8f, 5.9f, 6.0f, 6.1f, 6.2f, 6.3f, 6.4f, 6.5f, 6.6f, 6.7f, 6.8f, 6.9f, 7.0f, 7.1f, 7.2f, 7.3f, 7.4f, 7.5f, 7.6f, 7.7f, 7.8f, 7.9f, 8.0f, 8.1f, 8.2f, 8.3f, 8.4f, 8.5f, 8.6f, 8.7f, 8.8f, 8.9f, 9.0f, 9.1f, 9.2f, 9.3f, 9.4f, 9.5f, 9.6f, 9.7f, 9.8f, 9.9f, 10.0f, 10.1f, 10.2f, 10.3f, 10.4f, 10.5f, 10.6f, 10.7f, 10.8f, 10.9f, 11.0f, 11.1f, 11.2f, 11.3f, 11.4f, 11.5f, 11.6f, 11.7f, 11.8f, 11.9f, 12.0f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-2.3025850929940455f, -1.6094379124341003f, -1.2039728043259361f, -0.916290731874155f, -0.6931471805599453f, -0.5108256237659907f, -0.35667494393873245f, -0.2231435513142097f, -0.10536051565782628f, 0.0f, 0.09531017980432493f, 0.1823215567939546f, 0.26236426446749106f, 0.3364722366212129f, 0.4054651081081644f, 0.47000362924573563f, 0.5306282510621704f, 0.5877866649021191f, 0.6418538861723947f, 0.6931471805599453f, 0.7419373447293773f, 0.7884573603642703f, 0.8329091229351039f, 0.8754687373538999f, 0.9162907318741551f, 0.9555114450274363f, 0.9932517730102834f, 1.0296194171811581f, 1.0647107369924282f, 1.0986122886681098f, 1.1314021114911006f, 1.1631508098056809f, 1.1939224684724346f, 1.2237754316221157f, 1.252762968495368f, 1.2809338454620642f, 1.308332819650179f, 1.33500106673234f, 1.3609765531356006f, 1.3862943611198906f, 1.410986973710262f, 1.4350845252893227f, 1.4586150226995167f, 1.4816045409242156f, 1.5040773967762742f, 1.5260563034950492f, 1.547562508716013f, 1.5686159179138452f, 1.589235205116581f, 1.6094379124341003f, 1.62924053973028f, 1.6486586255873816f, 1.667706820558076f, 1.6863989535702288f, 1.7047480922384253f, 1.7227665977411035f, 1.7404661748405046f, 1.7578579175523736f, 1.7749523509116738f, 1.791759469228055f, 1.8082887711792655f, 1.824549292051046f, 1.840549633397487f, 1.8562979903656263f, 1.8718021769015913f, 1.8870696490323797f, 1.9021075263969205f, 1.916922612182061f, 1.9315214116032138f, 1.9459101490553132f, 1.9600947840472698f, 1.9740810260220096f, 1.9878743481543455f, 2.0014800002101243f, 2.0149030205422647f, 2.028148247292285f, 2.0412203288596382f, 2.0541237336955462f, 2.066862759472976f, 2.0794415416798357f, 2.0918640616783932f, 2.1041341542702074f, 2.1162555148025524f, 2.128231705849268f, 2.1400661634962708f, 2.151762203259462f, 2.163323025660538f, 2.174751721484161f, 2.186051276738094f, 2.1972245773362196f, 2.2082744135228043f, 2.2192034840549946f, 2.2300144001592104f, 2.2407096892759584f, 2.2512917986064953f, 2.2617630984737906f, 2.272125885509337f, 2.2823823856765264f, 2.2925347571405443f, 2.302585092994046f, 2.312535423847214f, 2.322387720290225f, 2.33214389523559f, 2.341805806147327f, 2.3513752571634776f, 2.3608540011180215f, 2.3702437414678603f, 2.379546134130174f, 2.388762789235098f, 2.3978952727983707f, 2.4069451083182885f, 2.4159137783010487f, 2.424802725718295f, 2.4336133554004498f, 2.4423470353692043f, 2.451005098112319f, 2.4595888418037104f, 2.468099531471619f, 2.4765384001174837f, 2.4849066497880004f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::LOG
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::UNKNOWN,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_relaxed = TestModelManager::get().add("log_relaxed", get_test_model_relaxed());

}  // namespace generated_tests::log

namespace generated_tests::log {

const TestModel& get_test_model_float16() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.10000000149011612f, 0.20000000298023224f, 0.30000001192092896f, 0.4000000059604645f, 0.5f, 0.6000000238418579f, 0.699999988079071f, 0.800000011920929f, 0.8999999761581421f, 1.0f, 1.100000023841858f, 1.2000000476837158f, 1.2999999523162842f, 1.399999976158142f, 1.5f, 1.600000023841858f, 1.7000000476837158f, 1.7999999523162842f, 1.899999976158142f, 2.0f, 2.0999999046325684f, 2.200000047683716f, 2.299999952316284f, 2.4000000953674316f, 2.5f, 2.5999999046325684f, 2.700000047683716f, 2.799999952316284f, 2.9000000953674316f, 3.0f, 3.0999999046325684f, 3.200000047683716f, 3.299999952316284f, 3.4000000953674316f, 3.5f, 3.5999999046325684f, 3.700000047683716f, 3.799999952316284f, 3.9000000953674316f, 4.0f, 4.099999904632568f, 4.199999809265137f, 4.300000190734863f, 4.400000095367432f, 4.5f, 4.599999904632568f, 4.699999809265137f, 4.800000190734863f, 4.900000095367432f, 5.0f, 5.099999904632568f, 5.199999809265137f, 5.300000190734863f, 5.400000095367432f, 5.5f, 5.599999904632568f, 5.699999809265137f, 5.800000190734863f, 5.900000095367432f, 6.0f, 6.099999904632568f, 6.199999809265137f, 6.300000190734863f, 6.400000095367432f, 6.5f, 6.599999904632568f, 6.699999809265137f, 6.800000190734863f, 6.900000095367432f, 7.0f, 7.099999904632568f, 7.199999809265137f, 7.300000190734863f, 7.400000095367432f, 7.5f, 7.599999904632568f, 7.699999809265137f, 7.800000190734863f, 7.900000095367432f, 8.0f, 8.100000381469727f, 8.199999809265137f, 8.300000190734863f, 8.399999618530273f, 8.5f, 8.600000381469727f, 8.699999809265137f, 8.800000190734863f, 8.899999618530273f, 9.0f, 9.100000381469727f, 9.199999809265137f, 9.300000190734863f, 9.399999618530273f, 9.5f, 9.600000381469727f, 9.699999809265137f, 9.800000190734863f, 9.899999618530273f, 10.0f, 10.100000381469727f, 10.199999809265137f, 10.300000190734863f, 10.399999618530273f, 10.5f, 10.600000381469727f, 10.699999809265137f, 10.800000190734863f, 10.899999618530273f, 11.0f, 11.100000381469727f, 11.199999809265137f, 11.300000190734863f, 11.399999618530273f, 11.5f, 11.600000381469727f, 11.699999809265137f, 11.800000190734863f, 11.899999618530273f, 12.0f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-2.3025851249694824f, -1.6094379425048828f, -1.2039728164672852f, -0.9162907600402832f, -0.6931471824645996f, -0.5108256340026855f, -0.3566749393939972f, -0.2231435477733612f, -0.10536051541566849f, 0.0f, 0.09531018137931824f, 0.18232156336307526f, 0.2623642683029175f, 0.3364722430706024f, 0.40546509623527527f, 0.4700036346912384f, 0.5306282639503479f, 0.5877866744995117f, 0.6418538689613342f, 0.6931471824645996f, 0.7419373393058777f, 0.7884573340415955f, 0.832909107208252f, 0.8754687309265137f, 0.9162907600402832f, 0.9555114507675171f, 0.9932518005371094f, 1.0296194553375244f, 1.0647107362747192f, 1.0986123085021973f, 1.1314021348953247f, 1.1631507873535156f, 1.193922519683838f, 1.2237753868103027f, 1.2527629137039185f, 1.2809338569641113f, 1.3083328008651733f, 1.3350011110305786f, 1.3609765768051147f, 1.3862943649291992f, 1.4109870195388794f, 1.435084581375122f, 1.4586150646209717f, 1.4816045761108398f, 1.504077434539795f, 1.5260562896728516f, 1.5475624799728394f, 1.5686159133911133f, 1.5892351865768433f, 1.6094379425048828f, 1.6292405128479004f, 1.6486586332321167f, 1.667706847190857f, 1.686398983001709f, 1.7047480344772339f, 1.722766637802124f, 1.7404661178588867f, 1.7578579187393188f, 1.7749522924423218f, 1.7917594909667969f, 1.808288812637329f, 1.8245493173599243f, 1.8405495882034302f, 1.8562979698181152f, 1.8718022108078003f, 1.8870697021484375f, 1.9021074771881104f, 1.9169225692749023f, 1.9315214157104492f, 1.945910096168518f, 1.9600948095321655f, 1.974081039428711f, 1.9878743886947632f, 2.0014801025390625f, 2.0149030685424805f, 2.0281481742858887f, 2.0412204265594482f, 2.054123640060425f, 2.0668628215789795f, 2.079441547393799f, 2.0918641090393066f, 2.1041340827941895f, 2.116255521774292f, 2.1282317638397217f, 2.140066146850586f, 2.1517622470855713f, 2.163322925567627f, 2.1747517585754395f, 2.186051368713379f, 2.1972246170043945f, 2.2082743644714355f, 2.219203472137451f, 2.2300143241882324f, 2.2407097816467285f, 2.2512917518615723f, 2.261763095855713f, 2.2721259593963623f, 2.2823824882507324f, 2.292534828186035f, 2.3025851249694824f, 2.312535524368286f, 2.3223876953125f, 2.332143783569336f, 2.3418056964874268f, 2.3513753414154053f, 2.360853910446167f, 2.370243787765503f, 2.3795461654663086f, 2.3887627124786377f, 2.397895336151123f, 2.406944990158081f, 2.4159138202667236f, 2.424802780151367f, 2.4336133003234863f, 2.4423470497131348f, 2.451004981994629f, 2.4595887660980225f, 2.468099594116211f, 2.4765384197235107f, 2.4849066734313965f}),
                            .dimensions = {1, 2, 3, 4, 5},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::LOG
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_2,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_float16 = TestModelManager::get().add("log_float16", get_test_model_float16());

}  // namespace generated_tests::log

