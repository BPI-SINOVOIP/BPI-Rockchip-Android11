// Generated from quantize_quant8_signed.mod.py
// DO NOT EDIT
// clang-format off
#include "TestHarness.h"
using namespace test_helper;

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -128
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed = TestModelManager::get().add("quantize_quant8_signed_quant8_signed", get_test_model_quant8_signed());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output0
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -128
                        }, { // input0_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // dummy
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param13
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal", get_test_model_quant8_signed_all_inputs_as_internal());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_2() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input01
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output01
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -117, -117, -117, -117, -117, -117, -117, -117}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -127
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_2 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_2", get_test_model_quant8_signed_2());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_2() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input01
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output01
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -117, -117, -117, -117, -117, -117, -117, -117}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -127
                        }, { // input01_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // dummy1
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param14
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_2 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_2", get_test_model_quant8_signed_all_inputs_as_internal_2());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_3() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input02
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output02
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.01f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_3 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_3", get_test_model_quant8_signed_3());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_3() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input02
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output02
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -125, -118, -112, -105, -98, -92, -85, -78, -72, -65, -58, -51, -45, -38, -31, -25, -18, -11, -5, 2, 9, 15, 22, 29, 35, 42, 49, 56, 62, 69, 76, 82, 89, 96, 102, 109, 116, 122, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.01f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }, { // input02_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // dummy2
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param15
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_3 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_3", get_test_model_quant8_signed_all_inputs_as_internal_3());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_4() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input03
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output03
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 10.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_4 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_4", get_test_model_quant8_signed_4());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_4() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input03
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // output03
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 10.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }, { // input03_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // dummy3
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param16
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_4 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_4", get_test_model_quant8_signed_all_inputs_as_internal_4());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_5() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input04
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output04
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -128
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_5 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_5", get_test_model_quant8_signed_5());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_5() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input04
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output04
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -128
                        }, { // input04_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // dummy4
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param17
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_5 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_5", get_test_model_quant8_signed_all_inputs_as_internal_5());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_6() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input05
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output05
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -117, -117, -117, -117, -117, -117, -117, -117}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -127
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_6 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_6", get_test_model_quant8_signed_6());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_6() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input05
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output05
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -118, -117, -117, -117, -117, -117, -117, -117, -117}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 1.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -127
                        }, { // input05_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // dummy5
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param18
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_6 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_6", get_test_model_quant8_signed_all_inputs_as_internal_6());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_7() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input06
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output06
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.01f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_7 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_7", get_test_model_quant8_signed_7());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_7() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input06
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output06
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.01f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }, { // input06_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // dummy6
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param19
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_7 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_7", get_test_model_quant8_signed_all_inputs_as_internal_7());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_8() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {0},
                .operands = {{ // input07
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output07
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 10.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }},
                .operations = {{
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_8 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_8", get_test_model_quant8_signed_8());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_quant8_signed_all_inputs_as_internal_8() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = {
                .inputIndexes = {2},
                .operands = {{ // input07
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // output07
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 10.0f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = -8
                        }, { // input07_new
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({-10.0f, -9.933110367892976f, -9.866220735785953f, -9.799331103678929f, -9.732441471571907f, -9.665551839464882f, -9.59866220735786f, -9.531772575250836f, -9.464882943143813f, -9.397993311036789f, -9.331103678929766f, -9.264214046822742f, -9.19732441471572f, -9.130434782608695f, -9.063545150501673f, -8.996655518394649f, -8.929765886287626f, -8.862876254180602f, -8.79598662207358f, -8.729096989966555f, -8.662207357859533f, -8.595317725752508f, -8.528428093645484f, -8.461538461538462f, -8.39464882943144f, -8.327759197324415f, -8.26086956521739f, -8.193979933110368f, -8.127090301003344f, -8.060200668896321f, -7.993311036789297f, -7.926421404682275f, -7.8595317725752505f, -7.792642140468228f, -7.725752508361204f, -7.658862876254181f, -7.591973244147157f, -7.5250836120401345f, -7.45819397993311f, -7.391304347826087f, -7.3244147157190636f, -7.25752508361204f, -7.190635451505017f, -7.1237458193979935f, -7.05685618729097f, -6.989966555183947f, -6.923076923076923f, -6.8561872909699f, -6.789297658862877f, -6.722408026755852f, -6.65551839464883f, -6.588628762541806f, -6.521739130434783f, -6.454849498327759f, -6.387959866220736f, -6.321070234113712f, -6.25418060200669f, -6.187290969899665f, -6.120401337792643f, -6.053511705685619f, -5.986622073578595f, -5.919732441471572f, -5.852842809364549f, -5.785953177257525f, -5.719063545150502f, -5.6521739130434785f, -5.585284280936455f, -5.518394648829432f, -5.451505016722408f, -5.384615384615385f, -5.317725752508362f, -5.250836120401338f, -5.183946488294315f, -5.117056856187292f, -5.050167224080268f, -4.983277591973244f, -4.916387959866221f, -4.849498327759197f, -4.782608695652174f, -4.7157190635451505f, -4.648829431438127f, -4.581939799331104f, -4.51505016722408f, -4.448160535117057f, -4.381270903010034f, -4.31438127090301f, -4.247491638795987f, -4.1806020066889635f, -4.11371237458194f, -4.046822742474917f, -3.9799331103678934f, -3.91304347826087f, -3.8461538461538467f, -3.7792642140468233f, -3.7123745819398f, -3.6454849498327766f, -3.5785953177257532f, -3.511705685618729f, -3.4448160535117056f, -3.3779264214046822f, -3.311036789297659f, -3.2441471571906355f, -3.177257525083612f, -3.1103678929765888f, -3.0434782608695654f, -2.976588628762542f, -2.9096989966555187f, -2.8428093645484953f, -2.775919732441472f, -2.7090301003344486f, -2.642140468227425f, -2.575250836120402f, -2.5083612040133785f, -2.441471571906355f, -2.3745819397993317f, -2.3076923076923084f, -2.240802675585285f, -2.1739130434782616f, -2.1070234113712374f, -2.040133779264214f, -1.9732441471571907f, -1.9063545150501682f, -1.839464882943144f, -1.7725752508361214f, -1.7056856187290972f, -1.6387959866220747f, -1.5719063545150505f, -1.505016722408028f, -1.4381270903010037f, -1.3712374581939795f, -1.304347826086957f, -1.2374581939799327f, -1.1705685618729103f, -1.103678929765886f, -1.0367892976588635f, -0.9698996655518393f, -0.9030100334448168f, -0.8361204013377925f, -0.76923076923077f, -0.7023411371237458f, -0.6354515050167233f, -0.5685618729096991f, -0.5016722408026766f, -0.43478260869565233f, -0.36789297658862985f, -0.3010033444816056f, -0.23411371237458312f, -0.16722408026755886f, -0.10033444816053638f, -0.03344481605351213f, 0.03344481605351213f, 0.1003344481605346f, 0.16722408026755886f, 0.23411371237458134f, 0.3010033444816056f, 0.3678929765886281f, 0.43478260869565233f, 0.5016722408026748f, 0.5685618729096991f, 0.6354515050167215f, 0.7023411371237458f, 0.7692307692307683f, 0.8361204013377925f, 0.903010033444815f, 0.9698996655518393f, 1.0367892976588617f, 1.103678929765886f, 1.1705685618729085f, 1.2374581939799327f, 1.3043478260869552f, 1.3712374581939795f, 1.4381270903010037f, 1.5050167224080262f, 1.5719063545150505f, 1.638795986622073f, 1.7056856187290972f, 1.7725752508361197f, 1.839464882943144f, 1.9063545150501664f, 1.9732441471571907f, 2.040133779264213f, 2.1070234113712374f, 2.17391304347826f, 2.240802675585284f, 2.3076923076923066f, 2.374581939799331f, 2.4414715719063533f, 2.5083612040133776f, 2.5752508361204f, 2.6421404682274243f, 2.709030100334447f, 2.775919732441471f, 2.8428093645484935f, 2.909698996655518f, 2.976588628762542f, 3.0434782608695645f, 3.1103678929765888f, 3.1772575250836113f, 3.2441471571906355f, 3.311036789297658f, 3.3779264214046822f, 3.4448160535117047f, 3.511705685618729f, 3.5785953177257515f, 3.6454849498327757f, 3.712374581939798f, 3.7792642140468224f, 3.846153846153845f, 3.913043478260869f, 3.9799331103678917f, 4.046822742474916f, 4.113712374581938f, 4.180602006688963f, 4.247491638795985f, 4.314381270903009f, 4.381270903010034f, 4.448160535117056f, 4.51505016722408f, 4.581939799331103f, 4.648829431438127f, 4.71571906354515f, 4.782608695652174f, 4.849498327759196f, 4.916387959866221f, 4.983277591973243f, 5.050167224080267f, 5.11705685618729f, 5.183946488294314f, 5.2508361204013365f, 5.317725752508361f, 5.384615384615383f, 5.4515050167224075f, 5.51839464882943f, 5.585284280936454f, 5.652173913043477f, 5.719063545150501f, 5.785953177257525f, 5.852842809364548f, 5.919732441471572f, 5.986622073578594f, 6.053511705685619f, 6.120401337792643f, 6.187290969899664f, 6.254180602006688f, 6.321070234113712f, 6.387959866220736f, 6.454849498327757f, 6.521739130434781f, 6.588628762541806f, 6.65551839464883f, 6.722408026755851f, 6.789297658862875f, 6.856187290969899f, 6.923076923076923f, 6.989966555183944f, 7.056856187290968f, 7.123745819397993f, 7.190635451505017f, 7.257525083612041f, 7.324414715719062f, 7.391304347826086f, 7.45819397993311f, 7.5250836120401345f, 7.591973244147155f, 7.6588628762541795f, 7.725752508361204f, 7.792642140468228f, 7.859531772575249f, 7.926421404682273f, 7.993311036789297f, 8.060200668896321f, 8.127090301003342f, 8.193979933110366f, 8.26086956521739f, 8.327759197324415f, 8.394648829431436f, 8.46153846153846f, 8.528428093645484f, 8.595317725752508f, 8.662207357859533f, 8.729096989966553f, 8.795986622073578f, 8.862876254180602f, 8.929765886287626f, 8.996655518394647f, 9.063545150501671f, 9.130434782608695f, 9.19732441471572f, 9.26421404682274f, 9.331103678929765f, 9.397993311036789f, 9.464882943143813f, 9.531772575250834f, 9.598662207357858f, 9.665551839464882f, 9.732441471571907f, 9.799331103678927f, 9.866220735785951f, 9.933110367892976f, 10.0f}),
                            .dimensions = {300},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // dummy7
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.0f}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param20
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {2, 3, 4},
                            .outputs = {0},
                            .type = TestOperationType::ADD
                        }, {
                            .inputs = {0},
                            .outputs = {1},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {1}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_quant8_signed_all_inputs_as_internal_8 = TestModelManager::get().add("quantize_quant8_signed_quant8_signed_all_inputs_as_internal_8", get_test_model_quant8_signed_all_inputs_as_internal_8());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_zero_sized() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = { // zero_sized
                .inputIndexes = {13},
                .operands = {{ // scores
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.9f, 0.1f}),
                            .dimensions = {1, 2},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // roi
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f, 1.0f, 10.0f, 10.0f, 0.0f, 0.0f, 10.0f, 10.0f}),
                            .dimensions = {1, 8},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // param1
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.3f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param2
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({-1}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param3
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param4
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.4f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param5
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param6
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.3f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // scoresOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // roiOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0, 4},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // classesOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // batchSplitOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // in
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f}),
                            .dimensions = {1, 1, 1, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param7
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param8
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param9
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param10
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param11
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param12
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // layout
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<bool8>({false}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::BOOL,
                            .zeroPoint = 0
                        }, { // featureMap
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // out
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.1f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0, 1, 2, 3, 4, 5, 6, 7, 8},
                            .outputs = {9, 10, 11, 12},
                            .type = TestOperationType::BOX_WITH_NMS_LIMIT
                        }, {
                            .inputs = {13, 10, 12, 14, 15, 16, 17, 18, 19, 20},
                            .outputs = {21},
                            .type = TestOperationType::ROI_ALIGN
                        }, {
                            .inputs = {21},
                            .outputs = {22},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {9, 11, 22}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_zero_sized = TestModelManager::get().add("quantize_quant8_signed_zero_sized", get_test_model_zero_sized());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_zero_sized_relaxed() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = true,
        .main = { // zero_sized
                .inputIndexes = {13},
                .operands = {{ // scores
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.9f, 0.1f}),
                            .dimensions = {1, 2},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // roi
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f, 1.0f, 10.0f, 10.0f, 0.0f, 0.0f, 10.0f, 10.0f}),
                            .dimensions = {1, 8},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // param1
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.3f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param2
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({-1}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param3
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param4
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.4f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param5
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param6
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({0.3f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // scoresOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // roiOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0, 4},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // classesOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // batchSplitOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // in
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({1.0f}),
                            .dimensions = {1, 1, 1, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // param7
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param8
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param9
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param10
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT32,
                            .zeroPoint = 0
                        }, { // param11
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param12
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // layout
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<bool8>({false}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::BOOL,
                            .zeroPoint = 0
                        }, { // featureMap
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<float>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT32,
                            .zeroPoint = 0
                        }, { // out
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.1f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0, 1, 2, 3, 4, 5, 6, 7, 8},
                            .outputs = {9, 10, 11, 12},
                            .type = TestOperationType::BOX_WITH_NMS_LIMIT
                        }, {
                            .inputs = {13, 10, 12, 14, 15, 16, 17, 18, 19, 20},
                            .outputs = {21},
                            .type = TestOperationType::ROI_ALIGN
                        }, {
                            .inputs = {21},
                            .outputs = {22},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {9, 11, 22}
            },
        .minSupportedVersion = TestHalVersion::UNKNOWN,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_zero_sized_relaxed = TestModelManager::get().add("quantize_quant8_signed_zero_sized_relaxed", get_test_model_zero_sized_relaxed());

}  // namespace generated_tests::quantize_quant8_signed

namespace generated_tests::quantize_quant8_signed {

const TestModel& get_test_model_zero_sized_float16() {
    static TestModel model = {
        .expectFailure = false,
        .expectedMultinomialDistributionTolerance = 0,
        .isRelaxed = false,
        .main = { // zero_sized
                .inputIndexes = {13},
                .operands = {{ // scores
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.8999999761581421f, 0.10000000149011612f}),
                            .dimensions = {1, 2},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // roi
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({1.0f, 1.0f, 10.0f, 10.0f, 0.0f, 0.0f, 10.0f, 10.0f}),
                            .dimensions = {1, 8},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // param1
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.30000001192092896f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // param2
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({-1}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param3
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({0}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param4
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.4000000059604645f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // param5
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({1.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // param6
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({0.30000001192092896f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // scoresOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // roiOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {0, 4},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // classesOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // batchSplitOut
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({}),
                            .dimensions = {0},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_INT32,
                            .zeroPoint = 0
                        }, { // in
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({1.0f}),
                            .dimensions = {1, 1, 1, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_INPUT,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // param7
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param8
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({2}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param9
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // param10
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({2.0f}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::FLOAT16,
                            .zeroPoint = 0
                        }, { // param11
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // param12
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int32_t>({4}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::INT32,
                            .zeroPoint = 0
                        }, { // layout
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<bool8>({false}),
                            .dimensions = {},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::CONSTANT_COPY,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::BOOL,
                            .zeroPoint = 0
                        }, { // featureMap
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<_Float16>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::TEMPORARY_VARIABLE,
                            .numberOfConsumers = 1,
                            .scale = 0.0f,
                            .type = TestOperandType::TENSOR_FLOAT16,
                            .zeroPoint = 0
                        }, { // out
                            .channelQuant = {},
                            .data = TestBuffer::createFromVector<int8_t>({}),
                            .dimensions = {0, 2, 2, 1},
                            .isIgnored = false,
                            .lifetime = TestOperandLifeTime::SUBGRAPH_OUTPUT,
                            .numberOfConsumers = 0,
                            .scale = 0.1f,
                            .type = TestOperandType::TENSOR_QUANT8_ASYMM_SIGNED,
                            .zeroPoint = 0
                        }},
                .operations = {{
                            .inputs = {0, 1, 2, 3, 4, 5, 6, 7, 8},
                            .outputs = {9, 10, 11, 12},
                            .type = TestOperationType::BOX_WITH_NMS_LIMIT
                        }, {
                            .inputs = {13, 10, 12, 14, 15, 16, 17, 18, 19, 20},
                            .outputs = {21},
                            .type = TestOperationType::ROI_ALIGN
                        }, {
                            .inputs = {21},
                            .outputs = {22},
                            .type = TestOperationType::QUANTIZE
                        }},
                .outputIndexes = {9, 11, 22}
            },
        .minSupportedVersion = TestHalVersion::V1_3,
        .referenced = {}
    };
    return model;
}

const auto dummy_test_model_zero_sized_float16 = TestModelManager::get().add("quantize_quant8_signed_zero_sized_float16", get_test_model_zero_sized_float16());

}  // namespace generated_tests::quantize_quant8_signed

