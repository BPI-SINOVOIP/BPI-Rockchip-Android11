// Signature format: 2.0
package com.android.permission.persistence {

  public interface RuntimePermissionsPersistence {
    method @NonNull public static com.android.permission.persistence.RuntimePermissionsPersistence createInstance();
    method public void deleteForUser(@NonNull android.os.UserHandle);
    method @Nullable public com.android.permission.persistence.RuntimePermissionsState readForUser(@NonNull android.os.UserHandle);
    method public void writeForUser(@NonNull com.android.permission.persistence.RuntimePermissionsState, @NonNull android.os.UserHandle);
  }

  public final class RuntimePermissionsState {
    ctor public RuntimePermissionsState(int, @Nullable String, @NonNull java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>>, @NonNull java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>>);
    method @Nullable public String getFingerprint();
    method @NonNull public java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>> getPackagePermissions();
    method @NonNull public java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>> getSharedUserPermissions();
    method public int getVersion();
    field public static final int NO_VERSION = -1; // 0xffffffff
  }

  public static final class RuntimePermissionsState.PermissionState {
    ctor public RuntimePermissionsState.PermissionState(@NonNull String, boolean, int);
    method public int getFlags();
    method @NonNull public String getName();
    method public boolean isGranted();
  }

}

package com.android.role.persistence {

  public interface RolesPersistence {
    method @NonNull public static com.android.role.persistence.RolesPersistence createInstance();
    method public void deleteForUser(@NonNull android.os.UserHandle);
    method @Nullable public com.android.role.persistence.RolesState readForUser(@NonNull android.os.UserHandle);
    method public void writeForUser(@NonNull com.android.role.persistence.RolesState, @NonNull android.os.UserHandle);
  }

  public final class RolesState {
    ctor public RolesState(int, @Nullable String, @NonNull java.util.Map<java.lang.String,java.util.Set<java.lang.String>>);
    method @Nullable public String getPackagesHash();
    method @NonNull public java.util.Map<java.lang.String,java.util.Set<java.lang.String>> getRoles();
    method public int getVersion();
  }

}

