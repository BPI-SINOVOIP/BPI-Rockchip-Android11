// Signature format: 2.0
package android.app {

  public class ActivityManager {
    method @Deprecated public static int getMaxNumPictureInPictureActions();
  }

  public class Notification implements android.os.Parcelable {
    method @Deprecated public String getChannel();
    method public static Class<? extends android.app.Notification.Style> getNotificationStyleClass(String);
    method @Deprecated public long getTimeout();
    method @Deprecated public void setLatestEventInfo(android.content.Context, CharSequence, CharSequence, android.app.PendingIntent);
  }

  public static final class Notification.BubbleMetadata implements android.os.Parcelable {
    method @Deprecated @Nullable public android.graphics.drawable.Icon getBubbleIcon();
    method @Deprecated @Nullable public android.app.PendingIntent getBubbleIntent();
  }

  public static final class Notification.BubbleMetadata.Builder {
    method @Deprecated @NonNull public android.app.Notification.BubbleMetadata.Builder createIntentBubble(@NonNull android.app.PendingIntent, @NonNull android.graphics.drawable.Icon);
    method @Deprecated @NonNull public android.app.Notification.BubbleMetadata.Builder createShortcutBubble(@NonNull String);
  }

  public static class Notification.Builder {
    method @Deprecated public android.app.Notification.Builder setChannel(String);
    method @Deprecated public android.app.Notification.Builder setTimeout(long);
  }

}

package android.app.slice {

  public final class Slice implements android.os.Parcelable {
    field @Deprecated public static final String EXTRA_SLIDER_VALUE = "android.app.slice.extra.SLIDER_VALUE";
    field @Deprecated public static final String SUBTYPE_SLIDER = "slider";
  }

  public static class Slice.Builder {
    ctor @Deprecated public Slice.Builder(@NonNull android.net.Uri);
    method @Deprecated public android.app.slice.Slice.Builder addTimestamp(long, @Nullable String, java.util.List<java.lang.String>);
    method @Deprecated public android.app.slice.Slice.Builder setSpec(android.app.slice.SliceSpec);
  }

  public final class SliceItem implements android.os.Parcelable {
    method @Deprecated public long getTimestamp();
    field @Deprecated public static final String FORMAT_TIMESTAMP = "long";
  }

  public class SliceManager {
    method @Deprecated @Nullable public android.app.slice.Slice bindSlice(@NonNull android.net.Uri, @NonNull java.util.List<android.app.slice.SliceSpec>);
    method @Deprecated @Nullable public android.app.slice.Slice bindSlice(@NonNull android.content.Intent, @NonNull java.util.List<android.app.slice.SliceSpec>);
    method @Deprecated public void pinSlice(@NonNull android.net.Uri, @NonNull java.util.List<android.app.slice.SliceSpec>);
  }

  public abstract class SliceProvider extends android.content.ContentProvider {
    method @Deprecated public android.app.slice.Slice onBindSlice(android.net.Uri, java.util.List<android.app.slice.SliceSpec>);
  }

}

package android.app.usage {

  public final class StorageStats implements android.os.Parcelable {
    method @Deprecated public long getCodeBytes();
  }

  public class StorageStatsManager {
    method @Deprecated public long getFreeBytes(String) throws java.io.IOException;
    method @Deprecated public long getTotalBytes(String) throws java.io.IOException;
    method @Deprecated public boolean isQuotaSupported(String);
    method @Deprecated public android.app.usage.ExternalStorageStats queryExternalStatsForUser(String, android.os.UserHandle) throws java.io.IOException;
    method @Deprecated public android.app.usage.StorageStats queryStatsForPackage(String, String, android.os.UserHandle) throws java.io.IOException, android.content.pm.PackageManager.NameNotFoundException;
    method @Deprecated public android.app.usage.StorageStats queryStatsForUid(String, int) throws java.io.IOException;
    method @Deprecated public android.app.usage.StorageStats queryStatsForUser(String, android.os.UserHandle) throws java.io.IOException;
  }

}

package android.content {

  public abstract class ContentProvider implements android.content.ComponentCallbacks2 {
    method @Deprecated @Nullable public final String getCallingFeatureId();
  }

  public abstract class ContentResolver {
    method @Deprecated public void notifyChange(@NonNull Iterable<android.net.Uri>, @Nullable android.database.ContentObserver, int);
  }

  public abstract class Context {
    method @Deprecated @NonNull public android.content.Context createFeatureContext(@Nullable String);
    method @Deprecated @Nullable public String getFeatureId();
    method public abstract android.content.SharedPreferences getSharedPreferences(java.io.File, int);
    method public abstract java.io.File getSharedPreferencesPath(String);
  }

  public class ContextWrapper extends android.content.Context {
    method public android.content.SharedPreferences getSharedPreferences(java.io.File, int);
    method public java.io.File getSharedPreferencesPath(String);
  }

  public class Intent implements java.lang.Cloneable android.os.Parcelable {
    field @Deprecated public static final String EXTRA_QUICK_VIEW_ADVANCED = "android.intent.extra.QUICK_VIEW_ADVANCED";
  }

}

package android.content.pm {

  public class PackageInfo implements android.os.Parcelable {
    field public static final int REQUESTED_PERMISSION_REQUIRED = 1; // 0x1
  }

  public abstract class PackageManager {
    method public abstract boolean setInstantAppCookie(@Nullable byte[]);
  }

  public final class SharedLibraryInfo implements android.os.Parcelable {
    method public boolean isBuiltin();
    method public boolean isDynamic();
    method public boolean isStatic();
  }

}

package android.database {

  public abstract class AbstractCursor implements android.database.CrossProcessCursor {
    field protected Long mCurrentRowID;
    field protected int mRowIdColumnIndex;
    field protected java.util.HashMap<java.lang.Long,java.util.Map<java.lang.String,java.lang.Object>> mUpdatedRows;
  }

}

package android.graphics {

  @Deprecated public class AvoidXfermode extends android.graphics.Xfermode {
    ctor public AvoidXfermode(int, int, android.graphics.AvoidXfermode.Mode);
  }

  public enum AvoidXfermode.Mode {
    enum_constant public static final android.graphics.AvoidXfermode.Mode AVOID;
    enum_constant public static final android.graphics.AvoidXfermode.Mode TARGET;
  }

  public class Canvas {
    method @Deprecated public boolean clipRegion(@NonNull android.graphics.Region, @NonNull android.graphics.Region.Op);
    method @Deprecated public boolean clipRegion(@NonNull android.graphics.Region);
    method @Deprecated public int save(int);
    field @Deprecated public static final int CLIP_SAVE_FLAG = 2; // 0x2
    field @Deprecated public static final int CLIP_TO_LAYER_SAVE_FLAG = 16; // 0x10
    field @Deprecated public static final int FULL_COLOR_LAYER_SAVE_FLAG = 8; // 0x8
    field @Deprecated public static final int HAS_ALPHA_LAYER_SAVE_FLAG = 4; // 0x4
    field @Deprecated public static final int MATRIX_SAVE_FLAG = 1; // 0x1
  }

  public final class ImageDecoder implements java.lang.AutoCloseable {
    method @Deprecated public boolean getAsAlphaMask();
    method @Deprecated public boolean getConserveMemory();
    method @Deprecated public boolean getDecodeAsAlphaMask();
    method @Deprecated public boolean getMutable();
    method @Deprecated public boolean getRequireUnpremultiplied();
    method @Deprecated public android.graphics.ImageDecoder setAsAlphaMask(boolean);
    method @Deprecated public void setConserveMemory(boolean);
    method @Deprecated public android.graphics.ImageDecoder setDecodeAsAlphaMask(boolean);
    method @Deprecated public android.graphics.ImageDecoder setMutable(boolean);
    method @Deprecated public android.graphics.ImageDecoder setRequireUnpremultiplied(boolean);
    method @Deprecated public android.graphics.ImageDecoder setResize(int, int);
    method @Deprecated public android.graphics.ImageDecoder setResize(int);
    field @Deprecated public static final int ERROR_SOURCE_ERROR = 3; // 0x3
    field @Deprecated public static final int ERROR_SOURCE_EXCEPTION = 1; // 0x1
    field @Deprecated public static final int ERROR_SOURCE_INCOMPLETE = 2; // 0x2
  }

  @Deprecated public static class ImageDecoder.IncompleteException extends java.io.IOException {
    ctor public ImageDecoder.IncompleteException();
  }

  @Deprecated public class LayerRasterizer extends android.graphics.Rasterizer {
    ctor public LayerRasterizer();
    method public void addLayer(android.graphics.Paint, float, float);
    method public void addLayer(android.graphics.Paint);
  }

  public class Paint {
    method @Deprecated public android.graphics.Rasterizer getRasterizer();
    method @Deprecated public android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer);
  }

  public class Picture {
    method @Deprecated public static android.graphics.Picture createFromStream(@NonNull java.io.InputStream);
    method @Deprecated public void writeToStream(@NonNull java.io.OutputStream);
  }

  @Deprecated public class PixelXorXfermode extends android.graphics.Xfermode {
    ctor public PixelXorXfermode(int);
  }

  public class Rasterizer {
    ctor public Rasterizer();
  }

}

package android.graphics.drawable {

  public class AnimatedImageDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Animatable2 {
    method @Deprecated public int getLoopCount(int);
    method @Deprecated public void setLoopCount(int);
    field @Deprecated public static final int LOOP_INFINITE = -1; // 0xffffffff
  }

}

package android.hardware {

  public final class SensorDirectChannel implements java.nio.channels.Channel {
    method @Deprecated public boolean isValid();
  }

}

package android.icu.util {

  public class JapaneseCalendar extends android.icu.util.GregorianCalendar {
    field @Deprecated public static final int CURRENT_ERA;
  }

}

package android.location {

  public class Location implements android.os.Parcelable {
    method @Deprecated public void removeBearingAccuracy();
    method @Deprecated public void removeSpeedAccuracy();
    method @Deprecated public void removeVerticalAccuracy();
  }

}

package android.media {

  public final class AudioFormat implements android.os.Parcelable {
    ctor public AudioFormat();
  }

}

package android.media.tv {

  public class TvView extends android.view.ViewGroup {
    method public void requestUnblockContent(android.media.tv.TvContentRating);
  }

}

package android.net {

  public class ConnectivityManager {
    method @Deprecated public boolean requestRouteToHost(int, int);
    method @Deprecated public int startUsingNetworkFeature(int, String);
    method @Deprecated public int stopUsingNetworkFeature(int, String);
  }

  @Deprecated public class NetworkBadging {
    method @NonNull public static android.graphics.drawable.Drawable getWifiIcon(@IntRange(from=0, to=4) int, int, @Nullable android.content.res.Resources.Theme);
    field public static final int BADGING_4K = 30; // 0x1e
    field public static final int BADGING_HD = 20; // 0x14
    field public static final int BADGING_NONE = 0; // 0x0
    field public static final int BADGING_SD = 10; // 0xa
  }

  @IntDef({0x0, 0xa, 0x14, 0x1e}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface NetworkBadging.Badging {
  }

  @Deprecated public class SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory {
    method @Deprecated public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int, android.net.SSLSessionCache);
  }

  public class TrafficStats {
    method @Deprecated public static void setThreadStatsUidSelf();
  }

}

package android.os {

  public class BatteryManager {
    ctor public BatteryManager();
  }

  public final class PowerManager {
    method public void goToSleep(long);
    method @Deprecated public void userActivity(long, boolean);
    method @Deprecated public void wakeUp(long);
  }

  public class RecoverySystem {
    ctor public RecoverySystem();
  }

  public static final class StrictMode.ThreadPolicy.Builder {
    method @NonNull public android.os.StrictMode.ThreadPolicy.Builder penaltyListener(@NonNull android.os.StrictMode.OnThreadViolationListener, @NonNull java.util.concurrent.Executor);
  }

  public static final class StrictMode.VmPolicy.Builder {
    method @NonNull public android.os.StrictMode.VmPolicy.Builder penaltyListener(@NonNull android.os.StrictMode.OnVmViolationListener, @NonNull java.util.concurrent.Executor);
  }

  public final class SystemClock {
    method @NonNull public static java.time.Clock elapsedRealtimeClock();
    method @NonNull public static java.time.Clock uptimeClock();
  }

  public class TestLooperManager {
    method @Deprecated public android.os.MessageQueue getQueue();
  }

  public class UserManager {
    method public android.graphics.drawable.Drawable getBadgedDrawableForUser(android.graphics.drawable.Drawable, android.os.UserHandle, android.graphics.Rect, int);
    method public android.graphics.drawable.Drawable getBadgedIconForUser(android.graphics.drawable.Drawable, android.os.UserHandle);
    method public CharSequence getBadgedLabelForUser(CharSequence, android.os.UserHandle);
  }

}

package android.os.storage {

  public class StorageManager {
    method @NonNull public android.os.storage.StorageVolume getPrimaryVolume();
    method @NonNull public android.os.storage.StorageVolume[] getVolumeList();
  }

}

package android.provider {

  public class Browser {
    method @RequiresPermission(allOf={"com.android.browser.permission.READ_HISTORY_BOOKMARKS", "com.android.browser.permission.WRITE_HISTORY_BOOKMARKS"}, apis="..22") public static final void addSearchUrl(android.content.ContentResolver, String);
    method @RequiresPermission(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") public static final boolean canClearHistory(android.content.ContentResolver);
    method @RequiresPermission(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final void clearHistory(android.content.ContentResolver);
    method @RequiresPermission(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final void clearSearches(android.content.ContentResolver);
    method @RequiresPermission(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final void deleteFromHistory(android.content.ContentResolver, String);
    method @RequiresPermission(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final void deleteHistoryTimeFrame(android.content.ContentResolver, long, long);
    method @RequiresPermission(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") public static final android.database.Cursor getAllBookmarks(android.content.ContentResolver) throws java.lang.IllegalStateException;
    method @RequiresPermission(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") public static final android.database.Cursor getAllVisitedUrls(android.content.ContentResolver) throws java.lang.IllegalStateException;
    method @RequiresPermission(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") public static final void requestAllIcons(android.content.ContentResolver, String, android.webkit.WebIconDatabase.IconListener);
    method public static final void saveBookmark(android.content.Context, String, String);
    method @RequiresPermission(allOf={"com.android.browser.permission.READ_HISTORY_BOOKMARKS", "com.android.browser.permission.WRITE_HISTORY_BOOKMARKS"}, apis="..22") public static final void truncateHistory(android.content.ContentResolver);
    method @RequiresPermission(allOf={"com.android.browser.permission.READ_HISTORY_BOOKMARKS", "com.android.browser.permission.WRITE_HISTORY_BOOKMARKS"}, apis="..22") public static final void updateVisitedHistory(android.content.ContentResolver, String, boolean);
    field @RequiresPermission.Read(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") @RequiresPermission.Write(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final android.net.Uri BOOKMARKS_URI;
    field public static final String[] HISTORY_PROJECTION;
    field public static final int HISTORY_PROJECTION_BOOKMARK_INDEX = 4; // 0x4
    field public static final int HISTORY_PROJECTION_DATE_INDEX = 3; // 0x3
    field public static final int HISTORY_PROJECTION_FAVICON_INDEX = 6; // 0x6
    field public static final int HISTORY_PROJECTION_ID_INDEX = 0; // 0x0
    field public static final int HISTORY_PROJECTION_TITLE_INDEX = 5; // 0x5
    field public static final int HISTORY_PROJECTION_URL_INDEX = 1; // 0x1
    field public static final int HISTORY_PROJECTION_VISITS_INDEX = 2; // 0x2
    field public static final String[] SEARCHES_PROJECTION;
    field public static final int SEARCHES_PROJECTION_DATE_INDEX = 2; // 0x2
    field public static final int SEARCHES_PROJECTION_SEARCH_INDEX = 1; // 0x1
    field @RequiresPermission.Read(value="com.android.browser.permission.READ_HISTORY_BOOKMARKS", apis="..22") @RequiresPermission.Write(value="com.android.browser.permission.WRITE_HISTORY_BOOKMARKS", apis="..22") public static final android.net.Uri SEARCHES_URI;
    field public static final String[] TRUNCATE_HISTORY_PROJECTION;
    field public static final int TRUNCATE_HISTORY_PROJECTION_ID_INDEX = 0; // 0x0
    field public static final int TRUNCATE_N_OLDEST = 5; // 0x5
  }

  public static class Browser.BookmarkColumns implements android.provider.BaseColumns {
    ctor public Browser.BookmarkColumns();
    field public static final String BOOKMARK = "bookmark";
    field public static final String CREATED = "created";
    field public static final String DATE = "date";
    field public static final String FAVICON = "favicon";
    field public static final String TITLE = "title";
    field public static final String URL = "url";
    field public static final String VISITS = "visits";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  public static class Browser.SearchColumns implements android.provider.BaseColumns {
    ctor public Browser.SearchColumns();
    field public static final String DATE = "date";
    field public static final String SEARCH = "search";
    field @Deprecated public static final String URL = "url";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  @Deprecated public static final class ContactsContract.Contacts.StreamItems implements android.provider.ContactsContract.StreamItemsColumns {
    field @Deprecated public static final String CONTENT_DIRECTORY = "stream_items";
  }

  @Deprecated public static final class ContactsContract.RawContacts.StreamItems implements android.provider.BaseColumns android.provider.ContactsContract.StreamItemsColumns {
    field @Deprecated public static final String CONTENT_DIRECTORY = "stream_items";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  @Deprecated public static final class ContactsContract.StreamItemPhotos implements android.provider.BaseColumns android.provider.ContactsContract.StreamItemPhotosColumns {
    field @Deprecated public static final String PHOTO = "photo";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  @Deprecated protected static interface ContactsContract.StreamItemPhotosColumns {
    field @Deprecated public static final String PHOTO_FILE_ID = "photo_file_id";
    field @Deprecated public static final String PHOTO_URI = "photo_uri";
    field @Deprecated public static final String SORT_INDEX = "sort_index";
    field @Deprecated public static final String STREAM_ITEM_ID = "stream_item_id";
    field @Deprecated public static final String SYNC1 = "stream_item_photo_sync1";
    field @Deprecated public static final String SYNC2 = "stream_item_photo_sync2";
    field @Deprecated public static final String SYNC3 = "stream_item_photo_sync3";
    field @Deprecated public static final String SYNC4 = "stream_item_photo_sync4";
  }

  @Deprecated public static final class ContactsContract.StreamItems implements android.provider.BaseColumns android.provider.ContactsContract.StreamItemsColumns {
    field @Deprecated public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/stream_item";
    field @Deprecated public static final android.net.Uri CONTENT_LIMIT_URI;
    field @Deprecated public static final android.net.Uri CONTENT_PHOTO_URI;
    field @Deprecated public static final String CONTENT_TYPE = "vnd.android.cursor.dir/stream_item";
    field @Deprecated public static final android.net.Uri CONTENT_URI;
    field @Deprecated public static final String MAX_ITEMS = "max_items";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  @Deprecated public static final class ContactsContract.StreamItems.StreamItemPhotos implements android.provider.BaseColumns android.provider.ContactsContract.StreamItemPhotosColumns {
    field @Deprecated public static final String CONTENT_DIRECTORY = "photo";
    field @Deprecated public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/stream_item_photo";
    field @Deprecated public static final String CONTENT_TYPE = "vnd.android.cursor.dir/stream_item_photo";
    field public static final String _COUNT = "_count";
    field public static final String _ID = "_id";
  }

  @Deprecated protected static interface ContactsContract.StreamItemsColumns {
    field @Deprecated public static final String ACCOUNT_NAME = "account_name";
    field @Deprecated public static final String ACCOUNT_TYPE = "account_type";
    field @Deprecated public static final String COMMENTS = "comments";
    field @Deprecated public static final String CONTACT_ID = "contact_id";
    field @Deprecated public static final String CONTACT_LOOKUP_KEY = "contact_lookup";
    field @Deprecated public static final String DATA_SET = "data_set";
    field @Deprecated public static final String RAW_CONTACT_ID = "raw_contact_id";
    field @Deprecated public static final String RAW_CONTACT_SOURCE_ID = "raw_contact_source_id";
    field @Deprecated public static final String RES_ICON = "icon";
    field @Deprecated public static final String RES_LABEL = "label";
    field @Deprecated public static final String RES_PACKAGE = "res_package";
    field @Deprecated public static final String SYNC1 = "stream_item_sync1";
    field @Deprecated public static final String SYNC2 = "stream_item_sync2";
    field @Deprecated public static final String SYNC3 = "stream_item_sync3";
    field @Deprecated public static final String SYNC4 = "stream_item_sync4";
    field @Deprecated public static final String TEXT = "text";
    field @Deprecated public static final String TIMESTAMP = "timestamp";
  }

  public static interface MediaStore.Audio.AudioColumns extends android.provider.MediaStore.MediaColumns {
    field public static final String ALBUM = "album";
    field public static final String ARTIST = "artist";
    field public static final String COMPOSER = "composer";
    field public static final String DURATION = "duration";
  }

  public static interface MediaStore.DownloadColumns extends android.provider.MediaStore.MediaColumns {
    field @Deprecated public static final String DESCRIPTION = "description";
  }

  public static interface MediaStore.Files.FileColumns extends android.provider.MediaStore.MediaColumns {
    field public static final String TITLE = "title";
  }

  public static interface MediaStore.Images.ImageColumns extends android.provider.MediaStore.MediaColumns {
    field public static final String BUCKET_DISPLAY_NAME = "bucket_display_name";
    field public static final String BUCKET_ID = "bucket_id";
    field public static final String DATE_TAKEN = "datetaken";
    field public static final String GROUP_ID = "group_id";
    field public static final String ORIENTATION = "orientation";
  }

  public static interface MediaStore.MediaColumns extends android.provider.BaseColumns {
    field @Deprecated public static final String GROUP_ID = "group_id";
  }

  public static interface MediaStore.Video.VideoColumns extends android.provider.MediaStore.MediaColumns {
    field public static final String ALBUM = "album";
    field public static final String ARTIST = "artist";
    field public static final String BUCKET_DISPLAY_NAME = "bucket_display_name";
    field public static final String BUCKET_ID = "bucket_id";
    field public static final String DATE_TAKEN = "datetaken";
    field public static final String DURATION = "duration";
    field public static final String GROUP_ID = "group_id";
    field public static final String RESOLUTION = "resolution";
  }

  public static final class Settings.Global extends android.provider.Settings.NameValueTable {
    field @Deprecated public static final String CONTACT_METADATA_SYNC = "contact_metadata_sync";
  }

  public static final class Settings.System extends android.provider.Settings.NameValueTable {
    field public static final String APPEND_FOR_LAST_AUDIBLE = "_last_audible";
    field public static final String VOLUME_ALARM = "volume_alarm";
    field public static final String VOLUME_BLUETOOTH_SCO = "volume_bluetooth_sco";
    field public static final String VOLUME_MUSIC = "volume_music";
    field public static final String VOLUME_NOTIFICATION = "volume_notification";
    field public static final String VOLUME_RING = "volume_ring";
    field public static final String[] VOLUME_SETTINGS;
    field public static final String VOLUME_SYSTEM = "volume_system";
    field public static final String VOLUME_VOICE = "volume_voice";
  }

}

package android.speech.tts {

  public abstract class UtteranceProgressListener {
    method @Deprecated public void onUtteranceRangeStart(String, int, int);
  }

}

package android.telephony {

  public class NetworkScan {
    method @Deprecated public void stop() throws android.os.RemoteException;
  }

  public class TelephonyManager {
    method @Deprecated @RequiresPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION) public java.util.List<android.telephony.NeighboringCellInfo> getNeighboringCellInfo();
    method @Deprecated @RequiresPermission(allOf={android.Manifest.permission.MODIFY_PHONE_STATE, android.Manifest.permission.ACCESS_FINE_LOCATION}) public android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest, android.telephony.TelephonyScanManager.NetworkScanCallback);
  }

}

package android.text.format {

  public class DateFormat {
    field @Deprecated public static final char AM_PM = 97; // 0x0061 'a'
    field @Deprecated public static final char CAPITAL_AM_PM = 65; // 0x0041 'A'
    field @Deprecated public static final char DATE = 100; // 0x0064 'd'
    field @Deprecated public static final char DAY = 69; // 0x0045 'E'
    field @Deprecated public static final char HOUR = 104; // 0x0068 'h'
    field @Deprecated public static final char HOUR_OF_DAY = 107; // 0x006b 'k'
    field @Deprecated public static final char MINUTE = 109; // 0x006d 'm'
    field @Deprecated public static final char MONTH = 77; // 0x004d 'M'
    field @Deprecated public static final char QUOTE = 39; // 0x0027 '\''
    field @Deprecated public static final char SECONDS = 115; // 0x0073 's'
    field @Deprecated public static final char STANDALONE_MONTH = 76; // 0x004c 'L'
    field @Deprecated public static final char TIME_ZONE = 122; // 0x007a 'z'
    field @Deprecated public static final char YEAR = 121; // 0x0079 'y'
  }

}

package android.text.style {

  public class RasterizerSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance {
    ctor public RasterizerSpan(android.graphics.Rasterizer);
    method public android.graphics.Rasterizer getRasterizer();
    method public void updateDrawState(android.text.TextPaint);
  }

}

package android.util {

  @Deprecated public class FloatMath {
    method public static float ceil(float);
    method public static float cos(float);
    method public static float exp(float);
    method public static float floor(float);
    method public static float hypot(float, float);
    method public static float pow(float, float);
    method public static float sin(float);
    method public static float sqrt(float);
  }

}

package android.view {

  @UiThread public class View implements android.view.accessibility.AccessibilityEventSource android.graphics.drawable.Drawable.Callback android.view.KeyEvent.Callback {
    method protected void initializeFadingEdge(android.content.res.TypedArray);
    method protected void initializeScrollbars(android.content.res.TypedArray);
  }

  public class ViewConfiguration {
    method public int getScaledScrollFactor();
  }

  public static class WindowManager.LayoutParams extends android.view.ViewGroup.LayoutParams implements android.os.Parcelable {
    field public static final int TYPE_KEYGUARD = 2004; // 0x7d4
  }

}

package android.webkit {

  public class WebViewClient {
    method public void onUnhandledInputEvent(android.webkit.WebView, android.view.InputEvent);
  }

}

package android.widget {

  @android.widget.RemoteViews.RemoteView public class ListView extends android.widget.AbsListView {
    method protected <T extends android.view.View> T findViewTraversal(@IdRes int);
    method protected <T extends android.view.View> T findViewWithTagTraversal(Object);
  }

  public class PopupWindow {
    method @Deprecated public boolean isClipToScreenEnabled();
    method @Deprecated public boolean isLayoutInScreenEnabled();
    method @Deprecated public void setClipToScreenEnabled(boolean);
    method @Deprecated public void setLayoutInScreenEnabled(boolean);
  }

  @android.widget.RemoteViews.RemoteView public class TextView extends android.view.View implements android.view.ViewTreeObserver.OnPreDrawListener {
    method public static int getTextColor(android.content.Context, android.content.res.TypedArray, int);
    method public static android.content.res.ColorStateList getTextColors(android.content.Context, android.content.res.TypedArray);
  }

}

